{"version":3,"sources":["../../../src/visualizations/choropleth/getOptions.ts"],"names":["getDefaultMap","visualizationsSettings","choroplethAvailableMaps","DEFAULT_OPTIONS","mapType","keyColumn","targetField","valueColumn","clusteringMode","steps","valueFormat","noValuePlaceholder","colors","min","ColorPalette","max","background","White","borders","noValue","legend","visible","position","alignText","tooltip","enabled","template","popup","getOptions","options","result","bounds","countryCodeColumn","countryCodeType"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,SAASA,aAAT,GAAyB;AACvB,SAAO,mBAAM,kBAAKC,+CAAuBC,uBAA5B,CAAN,KAA+D,IAAtE;AACD;;AAED,IAAMC,eAAe,GAAG;AACtBC,EAAAA,OAAO,EAAE,WADa;AAEtBC,EAAAA,SAAS,EAAE,IAFW;AAGtBC,EAAAA,WAAW,EAAE,IAHS;AAItBC,EAAAA,WAAW,EAAE,IAJS;AAKtBC,EAAAA,cAAc,EAAE,GALM;AAMtBC,EAAAA,KAAK,EAAE,CANe;AAOtBC,EAAAA,WAAW,EAAE,QAPS;AAQtBC,EAAAA,kBAAkB,EAAE,KARE;AAStBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,GAAG,EAAEC,sBAAa,YAAb,CADC;AAENC,IAAAA,GAAG,EAAED,sBAAa,WAAb,CAFC;AAGNE,IAAAA,UAAU,EAAEF,sBAAaG,KAHnB;AAINC,IAAAA,OAAO,EAAEJ,sBAAaG,KAJhB;AAKNE,IAAAA,OAAO,EAAEL,sBAAa,YAAb;AALH,GATc;AAgBtBM,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE,IADH;AAENC,IAAAA,QAAQ,EAAE,aAFJ;AAGNC,IAAAA,SAAS,EAAE;AAHL,GAhBc;AAqBtBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE,IADF;AAEPC,IAAAA,QAAQ,EAAE;AAFH,GArBa;AAyBtBC,EAAAA,KAAK,EAAE;AACLF,IAAAA,OAAO,EAAE,IADJ;AAELC,IAAAA,QAAQ,EAAE;AAFL;AAzBe,CAAxB;;AA+Be,SAASE,UAAT,CAAoBC,OAApB,EAAkC;AAC/C,MAAMC,MAAM,GAAG,mBAAM,EAAN,EAAU3B,eAAV,EAA2B0B,OAA3B,CAAf,CAD+C,CAG/C;AACA;;AACAC,EAAAA,MAAM,CAACC,MAAP,GAAgB,iBAAIF,OAAJ,EAAa,QAAb,CAAhB,CAL+C,CAO/C;;AACA,MAAI,mBAAM5B,+CAAuBC,uBAAvB,CAA+C4B,MAAM,CAAC1B,OAAtD,CAAN,CAAJ,EAA2E;AACzE0B,IAAAA,MAAM,CAAC1B,OAAP,GAAiBJ,aAAa,EAA9B;AACD,GAV8C,CAY/C;;;AACA,MAAI,CAAC,mBAAM8B,MAAM,CAACE,iBAAb,CAAL,EAAsC;AACpCF,IAAAA,MAAM,CAACzB,SAAP,GAAmByB,MAAM,CAACE,iBAA1B;AACD;;AACD,SAAOF,MAAM,CAACE,iBAAd;;AAEA,MAAI,CAAC,mBAAMF,MAAM,CAACG,eAAb,CAAL,EAAoC;AAClCH,IAAAA,MAAM,CAACxB,WAAP,GAAqBwB,MAAM,CAACG,eAA5B;AACD;;AACD,SAAOH,MAAM,CAACG,eAAd;AAEA,SAAOH,MAAP;AACD","sourcesContent":["import { isNil, merge, first, keys, get } from \"lodash\";\nimport { visualizationsSettings } from \"@/visualizations/visualizationsSettings\";\nimport ColorPalette from \"./ColorPalette\";\n\nfunction getDefaultMap() {\n  return first(keys(visualizationsSettings.choroplethAvailableMaps)) || null;\n}\n\nconst DEFAULT_OPTIONS = {\n  mapType: \"countries\",\n  keyColumn: null,\n  targetField: null,\n  valueColumn: null,\n  clusteringMode: \"e\",\n  steps: 5,\n  valueFormat: \"0,0.00\",\n  noValuePlaceholder: \"N/A\",\n  colors: {\n    min: ColorPalette[\"Light Blue\"],\n    max: ColorPalette[\"Dark Blue\"],\n    background: ColorPalette.White,\n    borders: ColorPalette.White,\n    noValue: ColorPalette[\"Light Gray\"],\n  },\n  legend: {\n    visible: true,\n    position: \"bottom-left\",\n    alignText: \"right\",\n  },\n  tooltip: {\n    enabled: true,\n    template: \"<b>{{ @@name }}</b>: {{ @@value }}\",\n  },\n  popup: {\n    enabled: true,\n    template: \"Country: <b>{{ @@name_long }} ({{ @@iso_a2 }})</b>\\n<br>\\nValue: <b>{{ @@value }}</b>\",\n  },\n};\n\nexport default function getOptions(options: any) {\n  const result = merge({}, DEFAULT_OPTIONS, options);\n\n  // Both renderer and editor always provide new `bounds` array, so no need to clone it here.\n  // Keeping original object also reduces amount of updates in components\n  result.bounds = get(options, \"bounds\");\n\n  // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n  if (isNil(visualizationsSettings.choroplethAvailableMaps[result.mapType])) {\n    result.mapType = getDefaultMap();\n  }\n\n  // backward compatibility\n  if (!isNil(result.countryCodeColumn)) {\n    result.keyColumn = result.countryCodeColumn;\n  }\n  delete result.countryCodeColumn;\n\n  if (!isNil(result.countryCodeType)) {\n    result.targetField = result.countryCodeType;\n  }\n  delete result.countryCodeType;\n\n  return result;\n}\n"],"file":"getOptions.js"}