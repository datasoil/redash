{"version":3,"sources":["../../../../src/visualizations/choropleth/Renderer/initChoropleth.tsx"],"names":["CustomControl","L","Control","extend","options","position","onAdd","div","document","createElement","className","style","background","backgroundClip","onRemove","ReactDOM","unmountComponentAtNode","getContainer","prepareLayer","feature","layer","data","limits","colors","formatValue","value","targetField","valueFormatted","featureData","color","noValue","setStyle","borders","weight","fillColor","fillOpacity","tooltip","enabled","bindTooltip","template","sticky","popup","bindPopup","on","validateBounds","bounds","fallbackBounds","latLngBounds","isValid","initChoropleth","container","onBoundsChange","_map","map","center","zoom","zoomSnap","scrollWheelZoom","maxBoundsViscosity","attributionControl","fullscreenControl","_choropleth","_legend","handleMapBoundsChange","getBounds","_southWest","lat","lng","_northEast","boundsChangedFromMap","onMapMoveEnd","off","updateLayers","geoJson","eachLayer","removeLayer","removeControl","features","setMaxBounds","legend","valueFormat","noValuePlaceholder","geoJSON","onEachFeature","addTo","mapBounds","fitBounds","animate","duration","maxBounds","panInsideBounds","visible","length","setPosition","replace","addControl","render","item","text","limit","alignText","updateBounds","layerBounds","unwatchResize","invalidateSize","destroy","remove"],"mappings":"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","sourcesContent":["import { isFunction, isObject, isArray, map } from \"lodash\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-fullscreen\";\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\nimport { formatSimpleTemplate } from \"@/lib/value-format\";\nimport sanitize from \"@/services/sanitize\";\nimport resizeObserver from \"@/services/resizeObserver\";\nimport {\n  createNumberFormatter,\n  createScale,\n  darkenColor,\n  getColorByValue,\n  getValueForFeature,\n  prepareFeatureProperties,\n} from \"./utils\";\nimport Legend from \"./Legend\";\n\nconst CustomControl = L.Control.extend({\n  options: {\n    position: \"topright\",\n  },\n  onAdd() {\n    const div = document.createElement(\"div\");\n    div.className = \"leaflet-bar leaflet-custom-toolbar\";\n    div.style.background = \"#fff\";\n    div.style.backgroundClip = \"padding-box\";\n    return div;\n  },\n  onRemove() {\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'getContainer' does not exist on type '{ ... Remove this comment to see the full error message\n    ReactDOM.unmountComponentAtNode(this.getContainer());\n  },\n});\n\nfunction prepareLayer({ feature, layer, data, options, limits, colors, formatValue }: any) {\n  const value = getValueForFeature(feature, data, options.targetField);\n  const valueFormatted = formatValue(value);\n  const featureData = prepareFeatureProperties(feature, valueFormatted, data, options.targetField);\n  const color = getColorByValue(value, limits, colors, options.colors.noValue);\n\n  layer.setStyle({\n    color: options.colors.borders,\n    weight: 1,\n    fillColor: color,\n    fillOpacity: 1,\n  });\n\n  if (options.tooltip.enabled) {\n    layer.bindTooltip(sanitize(formatSimpleTemplate(options.tooltip.template, featureData)), { sticky: true });\n  }\n\n  if (options.popup.enabled) {\n    layer.bindPopup(sanitize(formatSimpleTemplate(options.popup.template, featureData)));\n  }\n\n  layer.on(\"mouseover\", () => {\n    layer.setStyle({\n      weight: 2,\n      fillColor: darkenColor(color),\n    });\n  });\n  layer.on(\"mouseout\", () => {\n    layer.setStyle({\n      weight: 1,\n      fillColor: color,\n    });\n  });\n}\n\nfunction validateBounds(bounds: any, fallbackBounds: any) {\n  if (bounds) {\n    bounds = L.latLngBounds(bounds[0], bounds[1]);\n    if (bounds.isValid()) {\n      return bounds;\n    }\n  }\n  if (fallbackBounds && fallbackBounds.isValid()) {\n    return fallbackBounds;\n  }\n  return null;\n}\n\nexport default function initChoropleth(container: any, onBoundsChange: any) {\n  const _map = L.map(container, {\n    center: [0.0, 0.0],\n    zoom: 1,\n    zoomSnap: 0,\n    scrollWheelZoom: false,\n    maxBoundsViscosity: 1,\n    attributionControl: false,\n    // @ts-expect-error ts-migrate(2345) FIXME: Argument of type '{ center: [number, number]; zoom... Remove this comment to see the full error message\n    fullscreenControl: true,\n  });\n  let _choropleth: any = null;\n  const _legend = new CustomControl();\n\n  function handleMapBoundsChange() {\n    if (isFunction(onBoundsChange)) {\n      const bounds = _map.getBounds();\n      onBoundsChange([\n        // @ts-expect-error ts-migrate(2551) FIXME: Property '_southWest' does not exist on type 'LatL... Remove this comment to see the full error message\n        [bounds._southWest.lat, bounds._southWest.lng],\n        // @ts-expect-error ts-migrate(2551) FIXME: Property '_northEast' does not exist on type 'LatL... Remove this comment to see the full error message\n        [bounds._northEast.lat, bounds._northEast.lng],\n      ]);\n    }\n  }\n\n  let boundsChangedFromMap = false;\n  const onMapMoveEnd = () => {\n    handleMapBoundsChange();\n  };\n  _map.on(\"focus\", () => {\n    boundsChangedFromMap = true;\n    _map.on(\"moveend\", onMapMoveEnd);\n  });\n  _map.on(\"blur\", () => {\n    _map.off(\"moveend\", onMapMoveEnd);\n    boundsChangedFromMap = false;\n  });\n\n  function updateLayers(geoJson: any, data: any, options: any) {\n    _map.eachLayer(layer => _map.removeLayer(layer));\n    _map.removeControl(_legend);\n\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'features' does not exist on type 'object... Remove this comment to see the full error message\n    if (!isObject(geoJson) || !isArray(geoJson.features)) {\n      _choropleth = null;\n      // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'null' is not assignable to param... Remove this comment to see the full error message\n      _map.setMaxBounds(null);\n      return;\n    }\n\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'features' does not exist on type 'object... Remove this comment to see the full error message\n    const { limits, colors, legend } = createScale(geoJson.features, data, options);\n    const formatValue = createNumberFormatter(options.valueFormat, options.noValuePlaceholder);\n\n    // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'object' is not assignable to par... Remove this comment to see the full error message\n    _choropleth = L.geoJSON(geoJson, {\n      onEachFeature(feature, layer) {\n        prepareLayer({ feature, layer, data, options, limits, colors, formatValue });\n      },\n    }).addTo(_map);\n\n    const mapBounds = _choropleth.getBounds();\n    const bounds = validateBounds(options.bounds, mapBounds);\n    _map.fitBounds(bounds, { animate: false, duration: 0 });\n\n    // equivalent to `_map.setMaxBounds(mapBounds)` but without animation\n    _map.options.maxBounds = mapBounds;\n    _map.panInsideBounds(mapBounds, { animate: false, duration: 0 });\n\n    // update legend\n    if (options.legend.visible && legend.length > 0) {\n      _legend.setPosition(options.legend.position.replace(\"-\", \"\"));\n      _map.addControl(_legend);\n      ReactDOM.render(\n        // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.\n        <Legend\n          // @ts-expect-error ts-migrate(2322) FIXME: Type '{ text: any; color: any; limit: any; }[]' is... Remove this comment to see the full error message\n          items={map(legend, item => ({ ...item, text: formatValue(item.limit) }))}\n          alignText={options.legend.alignText}\n        />,\n        _legend.getContainer()\n      );\n    }\n  }\n\n  function updateBounds(bounds: any) {\n    if (!boundsChangedFromMap) {\n      const layerBounds = _choropleth ? _choropleth.getBounds() : _map.getBounds();\n      bounds = validateBounds(bounds, layerBounds);\n      if (bounds) {\n        _map.fitBounds(bounds, { animate: false, duration: 0 });\n      }\n    }\n  }\n\n  const unwatchResize = resizeObserver(container, () => {\n    _map.invalidateSize(false);\n  });\n\n  return {\n    updateLayers,\n    updateBounds,\n    destroy() {\n      unwatchResize();\n      _map.removeControl(_legend); // _map.remove() does not cleanup controls - bug in Leaflet?\n      _map.remove();\n    },\n  };\n}\n"],"file":"initChoropleth.js"}