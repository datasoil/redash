{"version":3,"sources":["../../../../src/visualizations/choropleth/hooks/useLoadGeoJson.ts"],"names":["cache","useLoadGeoJson","mapType","geoJson","setGeoJson","isLoading","setIsLoading","mapUrl","visualizationsSettings","undefined","cancelled","promise","get","axios","catch","then","data","release"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAG,sCAAd;;AAEe,SAASC,cAAT,CAAwBC,OAAxB,EAAsC;AAAA,kBACrB,qBAAS,IAAT,CADqB;AAAA;AAAA,MAC5CC,OAD4C;AAAA,MACnCC,UADmC;;AAAA,mBAEjB,qBAAS,KAAT,CAFiB;AAAA;AAAA,MAE5CC,SAF4C;AAAA,MAEjCC,YAFiC;;AAInD,wBAAU,MAAM;AACd,QAAMC,MAAM,GAAG,iBAAIC,8CAAJ,oCAAuDN,OAAvD,WAAsEO,SAAtE,CAAf;;AAEA,QAAI,sBAASF,MAAT,CAAJ,EAAsB;AACpBD,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAII,SAAS,GAAG,KAAhB;AAEA,UAAMC,OAAO,GAAGX,KAAK,CAACY,GAAN,CAAUL,MAAV,EAAkB,MAAMM,eAAMD,GAAN,CAAUL,MAAV,EAAkBO,KAAlB,CAAwB,MAAM,IAA9B,CAAxB,CAAhB;AACAH,MAAAA,OAAO,CAACI,IAAR,CAAa,UAAmB;AAAA,YAAhBC,IAAgB,QAAhBA,IAAgB;;AAC9B,YAAI,CAACN,SAAL,EAAgB;AACd;AACAN,UAAAA,UAAU,CAAC,sBAASY,IAAT,IAAiBA,IAAjB,GAAwB,IAAzB,CAAV;AACAV,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,OAND;AAQA,aAAO,MAAM;AACXI,QAAAA,SAAS,GAAG,IAAZ;AACAV,QAAAA,KAAK,CAACiB,OAAN,CAAcV,MAAd;AACD,OAHD;AAID,KAjBD,MAiBO;AACLH,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAxBD,EAwBG,CAACJ,OAAD,CAxBH;AA0BA,SAAO,CAACC,OAAD,EAAUE,SAAV,CAAP;AACD","sourcesContent":["import { isString, isObject, get } from \"lodash\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { visualizationsSettings } from \"@/visualizations/visualizationsSettings\";\nimport createReferenceCountingCache from \"@/lib/referenceCountingCache\";\n\nconst cache = createReferenceCountingCache();\n\nexport default function useLoadGeoJson(mapType: any) {\n  const [geoJson, setGeoJson] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const mapUrl = get(visualizationsSettings, `choroplethAvailableMaps.${mapType}.url`, undefined);\n\n    if (isString(mapUrl)) {\n      setIsLoading(true);\n      let cancelled = false;\n\n      const promise = cache.get(mapUrl, () => axios.get(mapUrl).catch(() => null));\n      promise.then(({ data }: any) => {\n        if (!cancelled) {\n          // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'object | null' is not assignable... Remove this comment to see the full error message\n          setGeoJson(isObject(data) ? data : null);\n          setIsLoading(false);\n        }\n      });\n\n      return () => {\n        cancelled = true;\n        cache.release(mapUrl);\n      };\n    } else {\n      setGeoJson(null);\n      setIsLoading(false);\n    }\n  }, [mapType]);\n\n  return [geoJson, isLoading];\n}\n"],"file":"useLoadGeoJson.js"}