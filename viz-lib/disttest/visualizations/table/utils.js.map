{"version":3,"sources":["../../../src/visualizations/table/utils.tsx"],"names":["nextOrderByDirection","direction","toggleOrderBy","columnName","orderBy","multiColumnSort","index","i","name","item","push","getOrderByInfo","result","prepareColumns","columns","searchInput","onOrderByChange","isMultiColumnSort","length","orderByInfo","tableColumns","column","isAscend","isDescend","sortColumnIndex","key","dataIndex","JSON","stringify","align","alignContent","sorter","multiple","sortOrder","title","description","paddingRight","onHeaderCell","className","onClick","event","shiftKey","initColumn","ColumnTypes","displayAs","Component","render","unused","row","children","record","props","initRows","rows","filterRows","searchTerm","searchColumns","toUpperCase","matchFields","prepareData","text","indexOf","match","sortRows","directions","ascend","descend","sort","a","b","va","vb"],"mappings":"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","sourcesContent":["import { isNil, map, get, filter, each, sortBy, some, findIndex, toString } from \"lodash\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport Tooltip from \"antd/lib/tooltip\";\nimport ColumnTypes from \"./columns\";\n\nfunction nextOrderByDirection(direction: any) {\n  switch (direction) {\n    case \"ascend\":\n      return \"descend\";\n    case \"descend\":\n      return null;\n    default:\n      return \"ascend\";\n  }\n}\n\nfunction toggleOrderBy(columnName: any, orderBy = [], multiColumnSort = false) {\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'name' does not exist on type 'never'.\n  const index = findIndex(orderBy, i => i.name === columnName);\n  const item = { name: columnName, direction: \"ascend\" };\n  if (index >= 0) {\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'string | null' is not assignable to type 'st... Remove this comment to see the full error message\n    item.direction = nextOrderByDirection(orderBy[index].direction);\n  }\n\n  if (multiColumnSort) {\n    if (!item.direction) {\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'name' does not exist on type 'never'.\n      return filter(orderBy, i => i.name !== columnName);\n    }\n    if (index >= 0) {\n      // @ts-expect-error ts-migrate(2322) FIXME: Type '{ name: any; direction: string; }' is not as... Remove this comment to see the full error message\n      orderBy[index] = item;\n    } else {\n      // @ts-expect-error ts-migrate(2345) FIXME: Argument of type '{ name: any; direction: string; ... Remove this comment to see the full error message\n      orderBy.push(item);\n    }\n    return [...orderBy];\n  }\n  return item.direction ? [item] : [];\n}\n\nfunction getOrderByInfo(orderBy: any) {\n  const result = {};\n  each(orderBy, ({ name, direction }, index) => {\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    result[name] = { direction, index: index + 1 };\n  });\n  return result;\n}\n\nexport function prepareColumns(columns: any, searchInput: any, orderBy: any, onOrderByChange: any) {\n  columns = filter(columns, \"visible\");\n  columns = sortBy(columns, \"order\");\n\n  const isMultiColumnSort = orderBy.length > 1;\n  const orderByInfo = getOrderByInfo(orderBy);\n\n  let tableColumns = map(columns, column => {\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    const isAscend = orderByInfo[column.name] && orderByInfo[column.name].direction === \"ascend\";\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    const isDescend = orderByInfo[column.name] && orderByInfo[column.name].direction === \"descend\";\n\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    const sortColumnIndex = isMultiColumnSort && orderByInfo[column.name] ? orderByInfo[column.name].index : null;\n\n    const result = {\n      key: column.name,\n      dataIndex: `record[${JSON.stringify(column.name)}]`,\n      align: column.alignContent,\n      sorter: { multiple: 1 }, // using { multiple: 1 } to allow built-in multi-column sort arrows\n      sortOrder: get(orderByInfo, [column.name, \"direction\"], null),\n      title: (\n        <React.Fragment>\n          {column.description && (\n            <span style={{ paddingRight: 5 }}>\n              <Tooltip placement=\"top\" title={column.description}>\n                <div className=\"table-visualization-heading\">\n                  <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\n                </div>\n              </Tooltip>\n            </span>\n          )}\n          <Tooltip placement=\"top\" title={column.title}>\n            <div className=\"table-visualization-heading\" data-sort-column-index={sortColumnIndex}>\n              {column.title}\n            </div>\n          </Tooltip>\n        </React.Fragment>\n      ),\n      onHeaderCell: () => ({\n        className: cx({\n          \"table-visualization-column-is-sorted\": isAscend || isDescend,\n        }),\n        onClick: (event: any) => onOrderByChange(toggleOrderBy(column.name, orderBy, event.shiftKey)),\n      }),\n    };\n\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    const initColumn = ColumnTypes[column.displayAs];\n    const Component = initColumn(column);\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'render' does not exist on type '{ key: a... Remove this comment to see the full error message\n    result.render = (unused: any, row: any) => ({\n      children: <Component row={row.record} />,\n      props: { className: `display-as-${column.displayAs}` },\n    });\n\n    return result;\n  });\n\n  tableColumns.push({\n    key: \"###Redash::Visualizations::Table::Spacer###\",\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'null' is not assignable to type 'string'.\n    dataIndex: null,\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'Element'.\n    title: \"\",\n    className: \"table-visualization-spacer\",\n    render: () => \"\",\n    // @ts-expect-error ts-migrate(2741) FIXME: Property 'onClick' is missing in type '{ className... Remove this comment to see the full error message\n    onHeaderCell: () => ({ className: \"table-visualization-spacer\" }),\n  });\n\n  if (searchInput) {\n    // Add searchInput as the ColumnGroup for all table columns\n    tableColumns = [\n      {\n        key: \"table-search\",\n        title: searchInput,\n        // @ts-expect-error ts-migrate(2741) FIXME: Property 'onClick' is missing in type '{ className... Remove this comment to see the full error message\n        onHeaderCell: () => ({ className: \"table-visualization-search\" }),\n        children: tableColumns,\n      },\n    ];\n  }\n\n  return tableColumns;\n}\n\nexport function initRows(rows: any) {\n  return map(rows, (record, index) => ({ key: `record${index}`, record }));\n}\n\nexport function filterRows(rows: any, searchTerm: any, searchColumns: any) {\n  if (searchTerm !== \"\" && searchColumns.length > 0) {\n    searchTerm = searchTerm.toUpperCase();\n    const matchFields = map(searchColumns, column => {\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      const initColumn = ColumnTypes[column.displayAs];\n      const { prepareData } = initColumn(column);\n      return (row: any) => {\n        const { text } = prepareData(row);\n        return (\n          toString(text)\n            .toUpperCase()\n            .indexOf(searchTerm) >= 0\n        );\n      };\n    });\n\n    return filter(rows, row => some(matchFields, match => match(row.record)));\n  }\n  return rows;\n}\n\nexport function sortRows(rows: any, orderBy: any) {\n  if (orderBy.length === 0 || rows.length === 0) {\n    return rows;\n  }\n\n  const directions = { ascend: 1, descend: -1 };\n\n  // Create a copy of array before sorting, because .sort() will modify original array\n  return [...rows].sort((a, b) => {\n    let va;\n    let vb;\n    for (let i = 0; i < orderBy.length; i += 1) {\n      va = a.record[orderBy[i].name];\n      vb = b.record[orderBy[i].name];\n      if (isNil(va) || va < vb) {\n        // if a < b - we should return -1, but take in account direction\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        return -1 * directions[orderBy[i].direction];\n      }\n      if (va > vb || isNil(vb)) {\n        // if a > b - we should return 1, but take in account direction\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        return 1 * directions[orderBy[i].direction];\n      }\n    }\n    return 0;\n  });\n}\n"],"file":"utils.js"}