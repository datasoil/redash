{"version":3,"sources":["../../../../src/visualizations/table/columns/json.tsx"],"names":["initJsonColumn","column","prepareData","row","text","name","length","visualizationsSettings","tableCellMaxJSONSize","value","JSON","parse","e","undefined","JsonColumn","friendlyName"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEe,SAASA,cAAT,CAAwBC,MAAxB,EAAqC;AAClD,WAASC,WAAT,CAAqBC,GAArB,EAA+B;AAC7B,QAAMC,IAAI,GAAGD,GAAG,CAACF,MAAM,CAACI,IAAR,CAAhB;;AACA,QAAI,sBAASD,IAAT,KAAkBA,IAAI,CAACE,MAAL,IAAeC,+CAAuBC,oBAA5D,EAAkF;AAChF,UAAI;AACF,eAAO;AAAEJ,UAAAA,IAAF;AAAQK,UAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWP,IAAX;AAAf,SAAP;AACD,OAFD,CAEE,OAAOQ,CAAP,EAAU,CACV;AACD;AACF;;AACD,WAAO;AAAER,MAAAA,IAAF;AAAQK,MAAAA,KAAK,EAAEI;AAAf,KAAP;AACD;;AAED,WAASC,UAAT,OAAkC;AAAA,QAAZX,GAAY,QAAZA,GAAY;;AAChC;AADgC,uBAERD,WAAW,CAACC,GAAD,CAFH;AAAA,QAExBC,IAFwB,gBAExBA,IAFwB;AAAA,QAElBK,KAFkB,gBAElBA,KAFkB;;AAGhC,QAAI,yBAAYA,KAAZ,CAAJ,EAAwB;AACtB,0BAAO;AAAK,QAAA,SAAS,EAAC;AAAf,SAAoC,KAAKL,IAAzC,CAAP;AACD;;AAED,wBACE;AAAK,MAAA,SAAS,EAAC;AAAf,oBACE,6BAAC,4BAAD;AAAqB,MAAA,KAAK,EAAEK;AAA5B,MADF,CADF;AAKD;;AAEDK,EAAAA,UAAU,CAACZ,WAAX,GAAyBA,WAAzB;AAEA,SAAOY,UAAP;AACD;;AAEDd,cAAc,CAACe,YAAf,GAA8B,MAA9B","sourcesContent":["import { isString, isUndefined } from \"lodash\";\nimport React from \"react\";\nimport JsonViewInteractive from \"@/components/json-view-interactive/JsonViewInteractive\";\nimport { visualizationsSettings } from \"@/visualizations/visualizationsSettings\";\n\nexport default function initJsonColumn(column: any) {\n  function prepareData(row: any) {\n    const text = row[column.name];\n    if (isString(text) && text.length <= visualizationsSettings.tableCellMaxJSONSize) {\n      try {\n        return { text, value: JSON.parse(text) };\n      } catch (e) {\n        // ignore `JSON.parse` error and return default value\n      }\n    }\n    return { text, value: undefined };\n  }\n\n  function JsonColumn({ row }: any) {\n    // eslint-disable-line react/prop-types\n    const { text, value } = prepareData(row);\n    if (isUndefined(value)) {\n      return <div className=\"json-cell-invalid\">{\"\" + text}</div>;\n    }\n\n    return (\n      <div className=\"json-cell-valid\">\n        <JsonViewInteractive value={value} />\n      </div>\n    );\n  }\n\n  JsonColumn.prepareData = prepareData;\n\n  return JsonColumn;\n}\n\ninitJsonColumn.friendlyName = \"JSON\";\n"],"file":"json.js"}