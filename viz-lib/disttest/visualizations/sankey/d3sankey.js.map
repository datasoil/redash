{"version":3,"sources":["../../../src/visualizations/sankey/d3sankey.ts"],"names":["center","node","y","dy","value","link","Sankey","sankey","nodeWidth","nodePadding","size","nodes","links","computeNodeLinks","forEach","sourceLinks","targetLinks","source","target","push","computeNodeValues","Math","max","d3","sum","moveSinksRight","x","length","scaleNodeBreadths","kx","computeNodeBreadths","remainingNodes","nextNodes","assignBreadth","dx","indexOf","n","computeNodeDepths","iterations","nodesByBreadth","nest","key","d","sortKeys","ascending","entries","map","values","initializeNodeDepth","ky","min","i","relaxLeftToRight","alpha","weightedSource","resolveCollisions","y0","sort","ascendingDepth","relaxRightToLeft","slice","reverse","weightedTarget","a","b","computeLinkDepths","ascendingTargetDepth","ascendingSourceDepth","sy","ty","_","arguments","layout","relayout","curvature","x0","x1","xi","interpolateNumber","x2","x3","y1"],"mappings":"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","sourcesContent":["/* eslint-disable */\n\nimport d3 from \"d3\";\n\nexport interface LinkType {\n  id: number;\n  name: string;\n  color: string;\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n  source: SourceTargetType;\n  target: SourceTargetType;\n}\n\nexport type SourceTargetType = {\n  sourceLinks: Array<LinkType>;\n  targetLinks: Array<LinkType>;\n};\n\nexport type NodeType = LinkType & SourceTargetType;\nexport interface D3SankeyType {\n  nodeWidth: (...args: any[]) => any;\n  nodeHeight: (...args: any[]) => any;\n  nodePadding: (...args: any[]) => any;\n  nodes: (...args: any[]) => any[];\n  link: (...args: any[]) => any;\n  links: (...args: any[]) => any[];\n  size: (...args: any[]) => any;\n  layout: (...args: any[]) => any;\n  relayout: (...args: any[]) => any;\n}\n\nexport type DType = { sy: number; ty: number; value: number; source: LinkType; target: LinkType } & LinkType;\n\nfunction center(node: any) {\n  return node.y + node.dy / 2;\n}\n\nfunction value(link: any) {\n  return link.value;\n}\n\nfunction Sankey(): D3SankeyType {\n  const sankey = {};\n  let nodeWidth = 24;\n  let nodePadding = 8;\n  let size = [1, 1];\n  let nodes: any[] = [];\n  let links: any[] = [];\n\n  // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n  function computeNodeLinks() {\n    nodes.forEach(node => {\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    links.forEach(link => {\n      let source = link.source;\n      let target = link.target;\n      if (typeof source === \"number\") source = link.source = nodes[link.source];\n      if (typeof target === \"number\") target = link.target = nodes[link.target];\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  }\n\n  // Compute the value (size) of each node by summing the associated links.\n  function computeNodeValues() {\n    nodes.forEach(node => {\n      node.value = Math.max(d3.sum(node.sourceLinks, value), d3.sum(node.targetLinks, value));\n    });\n  }\n\n  function moveSinksRight(x: any) {\n    nodes.forEach(node => {\n      if (!node.sourceLinks.length) {\n        node.x = x - 1;\n      }\n    });\n  }\n\n  function scaleNodeBreadths(kx: any) {\n    nodes.forEach(node => {\n      node.x *= kx;\n    });\n  }\n\n  // Iteratively assign the breadth (x-position) for each node.\n  // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n  // nodes with no incoming links are assigned breadth zero, while\n  // nodes with no outgoing links are assigned the maximum breadth.\n  function computeNodeBreadths() {\n    let remainingNodes = nodes;\n    let nextNodes: any;\n    let x = 0;\n\n    function assignBreadth(node: any) {\n      node.x = x;\n      node.dx = nodeWidth;\n      node.sourceLinks.forEach((link: any) => {\n        if (nextNodes.indexOf(link.target) < 0) {\n          nextNodes.push(link.target);\n        }\n      });\n    }\n\n    while (remainingNodes.length) {\n      nextNodes = [];\n      remainingNodes.forEach(assignBreadth);\n      remainingNodes = nextNodes;\n      x += 1;\n    }\n\n    moveSinksRight(x);\n    x = Math.max(\n      d3.max(nodes, n => n.x),\n      2\n    ); // get new maximum x value (min 2)\n    scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n  }\n\n  function computeNodeDepths(iterations: any) {\n    const nodesByBreadth = d3\n      // @ts-expect-error\n      .nest()\n      .key((d: any) => d.x)\n      .sortKeys(d3.ascending)\n      .entries(nodes)\n      .map((d: any) => d.values);\n\n    function initializeNodeDepth() {\n      // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n      const ky = d3.min(nodesByBreadth, n => (size[1] - (n.length - 1) * nodePadding) / d3.sum(n, value));\n\n      nodesByBreadth.forEach((n: any) => {\n        n.forEach((node: any, i: any) => {\n          node.y = i;\n          // @ts-expect-error ts-migrate(2532) FIXME: Object is possibly 'undefined'.\n          node.dy = node.value * ky;\n        });\n      });\n\n      links.forEach(link => {\n        // @ts-expect-error ts-migrate(2532) FIXME: Object is possibly 'undefined'.\n        link.dy = link.value * ky;\n      });\n    }\n\n    function relaxLeftToRight(alpha: any) {\n      function weightedSource(link: any) {\n        return center(link.source) * link.value;\n      }\n\n      nodesByBreadth.forEach((n: any) => {\n        n.forEach((node: any) => {\n          if (node.targetLinks.length) {\n            const y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n    }\n\n    function resolveCollisions() {\n      nodesByBreadth.forEach((nodes: any) => {\n        const n = nodes.length;\n        let node;\n        let dy;\n        let y0 = 0;\n        let i;\n\n        // Push any overlapping nodes down.\n        nodes.sort(ascendingDepth);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y0 - node.y;\n          if (dy > 0) node.y += dy;\n          y0 = node.y + node.dy + nodePadding;\n        }\n\n        // If the bottommost node goes outside the bounds, push it back up.\n        dy = y0 - nodePadding - size[1];\n        if (dy > 0) {\n          y0 = node.y -= dy;\n\n          // Push any overlapping nodes back up.\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y + node.dy + nodePadding - y0;\n            if (dy > 0) node.y -= dy;\n            y0 = node.y;\n          }\n        }\n      });\n    }\n\n    initializeNodeDepth();\n    resolveCollisions();\n\n    for (let alpha = 1; iterations > 0; iterations -= 1) {\n      relaxRightToLeft((alpha *= 0.99));\n      resolveCollisions();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n    }\n\n    function relaxRightToLeft(alpha: any) {\n      nodesByBreadth\n        .slice()\n        .reverse()\n        .forEach((nodes: any) => {\n          nodes.forEach((node: any) => {\n            if (node.sourceLinks.length) {\n              const y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n              node.y += (y - center(node)) * alpha;\n            }\n          });\n        });\n\n      function weightedTarget(link: any) {\n        return center(link.target) * link.value;\n      }\n    }\n\n    function ascendingDepth(a: any, b: any) {\n      return a.y - b.y;\n    }\n  }\n\n  function computeLinkDepths() {\n    nodes.forEach(node => {\n      node.sourceLinks.sort(ascendingTargetDepth);\n      node.targetLinks.sort(ascendingSourceDepth);\n    });\n    nodes.forEach(node => {\n      let sy = 0,\n        ty = 0;\n      node.sourceLinks.forEach((link: any) => {\n        link.sy = sy;\n        sy += link.dy;\n      });\n      node.targetLinks.forEach((link: any) => {\n        link.ty = ty;\n        ty += link.dy;\n      });\n    });\n\n    function ascendingSourceDepth(a: any, b: any) {\n      return a.source.y - b.source.y;\n    }\n\n    function ascendingTargetDepth(a: any, b: any) {\n      return a.target.y - b.target.y;\n    }\n  }\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'nodeWidth' does not exist on type '{}'.\n  sankey.nodeWidth = function(_: any) {\n    if (!arguments.length) return nodeWidth;\n    nodeWidth = +_;\n    return sankey;\n  };\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'nodePadding' does not exist on type '{}'... Remove this comment to see the full error message\n  sankey.nodePadding = function(_: any) {\n    if (!arguments.length) return nodePadding;\n    nodePadding = +_;\n    return sankey;\n  };\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'nodes' does not exist on type '{}'.\n  sankey.nodes = function(_: any) {\n    if (!arguments.length) return nodes;\n    nodes = _;\n    return sankey;\n  };\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'links' does not exist on type '{}'.\n  sankey.links = function(_: any) {\n    if (!arguments.length) return links;\n    links = _;\n    return sankey;\n  };\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'size' does not exist on type '{}'.\n  sankey.size = function(_: any) {\n    if (!arguments.length) return size;\n    size = _;\n    return sankey;\n  };\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'layout' does not exist on type '{}'.\n  sankey.layout = function(iterations: any) {\n    computeNodeLinks();\n    computeNodeValues();\n    computeNodeBreadths();\n    computeNodeDepths(iterations);\n    computeLinkDepths();\n    return sankey;\n  };\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'relayout' does not exist on type '{}'.\n  sankey.relayout = function() {\n    computeLinkDepths();\n    return sankey;\n  };\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'link' does not exist on type '{}'.\n  sankey.link = function() {\n    let curvature = 0.5;\n\n    function link(d: DType) {\n      const x0 = d.source.x + d.source.dx;\n      const x1 = d.target.x;\n      const xi = d3.interpolateNumber(x0, x1);\n      const x2 = xi(curvature);\n      const x3 = xi(1 - curvature);\n      const y0 = d.source.y + d.sy + d.dy / 2;\n      const y1 = d.target.y + d.ty + d.dy / 2;\n\n      return `M${x0},${y0}C${x2},${y0} ${x3},${y1} ${x1},${y1}`;\n    }\n\n    link.curvature = (_: any) => {\n      if (!arguments.length) return curvature;\n      curvature = +_;\n      return link;\n    };\n\n    return link;\n  };\n\n  return sankey as D3SankeyType;\n}\n\nexport default Sankey;\n"],"file":"d3sankey.js"}