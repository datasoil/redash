{"version":3,"sources":["../../../../src/visualizations/chart/Editor/SeriesSettings.tsx"],"names":["SortableBodyRow","props","getTableColumns","options","updateSeriesOption","debouncedUpdateSeriesOption","result","title","dataIndex","render","unused","item","zIndex","key","name","event","target","value","globalSeriesType","swappedAxes","push","yAxis","type","SeriesSettings","data","onOptionsChange","series","rows","seriesOptions","handleSortEnd","oldIndex","newIndex","splice","prop","columns","container","querySelector","className","body","row","index","propTypes","EditorPropTypes"],"mappings":"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","sourcesContent":["import { includes, map, extend, fromPairs } from \"lodash\";\nimport React, { useMemo, useCallback } from \"react\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport Table from \"antd/lib/table\";\nimport Input from \"antd/lib/input\";\nimport Radio from \"antd/lib/radio\";\n// @ts-expect-error ts-migrate(2724) FIXME: Module '\"../../../../node_modules/react-sortable-h... Remove this comment to see the full error message\nimport { sortableElement } from \"react-sortable-hoc\";\nimport { SortableContainer, DragHandle } from \"@/components/sortable\";\nimport { EditorPropTypes } from \"@/visualizations/prop-types\";\nimport ChartTypeSelect from \"./ChartTypeSelect\";\nimport getChartData from \"../getChartData\";\n\nconst SortableBodyRow = sortableElement((props: any) => <tr {...props} />);\n\nfunction getTableColumns(options: any, updateSeriesOption: any, debouncedUpdateSeriesOption: any) {\n  const result = [\n    {\n      title: \"Order\",\n      dataIndex: \"zIndex\",\n      render: (unused: any, item: any) => (\n        <span className=\"series-settings-order\">\n          <DragHandle />\n          {item.zIndex + 1}\n        </span>\n      ),\n    },\n    {\n      title: \"Label\",\n      dataIndex: \"name\",\n      render: (unused: any, item: any) => (\n        <Input\n          data-test={`Chart.Series.${item.key}.Label`}\n          placeholder={item.key}\n          defaultValue={item.name}\n          onChange={event => debouncedUpdateSeriesOption(item.key, \"name\", event.target.value)}\n        />\n      ),\n    },\n  ];\n\n  if (!includes([\"pie\", \"heatmap\"], options.globalSeriesType)) {\n    if (!options.swappedAxes) {\n      result.push({\n        title: \"Y Axis\",\n        dataIndex: \"yAxis\",\n        render: (unused, item) => (\n          <Radio.Group\n            className=\"series-settings-y-axis\"\n            value={item.yAxis === 1 ? 1 : 0}\n            onChange={event => updateSeriesOption(item.key, \"yAxis\", event.target.value)}>\n            <Radio value={0} data-test={`Chart.Series.${item.key}.UseLeftAxis`}>\n              left\n            </Radio>\n            <Radio value={1} data-test={`Chart.Series.${item.key}.UseRightAxis`}>\n              right\n            </Radio>\n          </Radio.Group>\n        ),\n      });\n    }\n\n    result.push({\n      title: \"Type\",\n      dataIndex: \"type\",\n      render: (unused, item) => (\n        <ChartTypeSelect\n          data-test={`Chart.Series.${item.key}.Type`}\n          dropdownMatchSelectWidth={false}\n          value={item.type}\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'never'.\n          hiddenChartTypes={[\"pie\", \"heatmap\", \"bubble\", \"box\"]}\n          onChange={(value: any) => updateSeriesOption(item.key, \"type\", value)}\n        />\n      ),\n    });\n  }\n\n  return result;\n}\n\nexport default function SeriesSettings({ options, data, onOptionsChange }: any) {\n  const series = useMemo(\n    () =>\n      map(\n        getChartData(data.rows, options), // returns sorted series\n        ({ name }, zIndex) =>\n          extend({ key: name, type: options.globalSeriesType }, options.seriesOptions[name], { zIndex })\n      ),\n    [options, data]\n  );\n\n  const handleSortEnd = useCallback(\n    ({ oldIndex, newIndex }) => {\n      const seriesOptions = [...series];\n      seriesOptions.splice(newIndex, 0, ...seriesOptions.splice(oldIndex, 1));\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'key' does not exist on type 'Boolean'.\n      onOptionsChange({ seriesOptions: fromPairs(map(seriesOptions, ({ key }, zIndex) => [key, { zIndex }])) });\n    },\n    [onOptionsChange, series]\n  );\n\n  const updateSeriesOption = useCallback(\n    (key, prop, value) => {\n      onOptionsChange({\n        seriesOptions: {\n          [key]: {\n            [prop]: value,\n          },\n        },\n      });\n    },\n    [onOptionsChange]\n  );\n  const [debouncedUpdateSeriesOption] = useDebouncedCallback(updateSeriesOption, 200);\n\n  const columns = useMemo(() => getTableColumns(options, updateSeriesOption, debouncedUpdateSeriesOption), [\n    options,\n    updateSeriesOption,\n    debouncedUpdateSeriesOption,\n  ]);\n\n  return (\n    <SortableContainer\n      axis=\"y\"\n      lockAxis=\"y\"\n      lockToContainerEdges\n      useDragHandle\n      helperClass=\"chart-editor-series-dragged-item\"\n      helperContainer={(container: any) => container.querySelector(\"tbody\")}\n      onSortEnd={handleSortEnd}\n      containerProps={{\n        className: \"chart-editor-series\",\n      }}>\n      {/* @ts-expect-error ts-migrate(2322) FIXME: Type 'Element' is not assignable to type 'null | u... Remove this comment to see the full error message */}\n      <Table\n        // @ts-expect-error ts-migrate(2322) FIXME: Type 'boolean[]' is not assignable to type 'object... Remove this comment to see the full error message\n        dataSource={series}\n        columns={columns}\n        components={{\n          body: {\n            row: SortableBodyRow,\n          },\n        }}\n        // @ts-expect-error ts-migrate(2322) FIXME: Type '(item: object) => { index: any; }' is not as... Remove this comment to see the full error message\n        onRow={item => ({ index: item.zIndex })}\n        pagination={false}\n      />\n    </SortableContainer>\n  );\n}\n\nSeriesSettings.propTypes = EditorPropTypes;\n"],"file":"SeriesSettings.js"}