{"version":3,"sources":["../../../../src/visualizations/chart/Editor/GeneralSettings.test.tsx"],"names":["findByTestID","wrapper","testId","find","elementExists","length","mount","options","done","enzyme","columns","rows","changedOptions","expect","toMatchSnapshot","describe","test","el","globalSeriesType","showDataLabels","seriesOptions","a","type","b","last","simulate","direction","legend","enabled","showpoints","target","checked","series","missingValuesAsZero","c","toBeTruthy"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport enzyme from \"enzyme\";\n\nimport getOptions from \"../getOptions\";\nimport GeneralSettings from \"./GeneralSettings\";\n\nfunction findByTestID(wrapper: any, testId: any) {\n  return wrapper.find(`[data-test=\"${testId}\"]`);\n}\n\nfunction elementExists(wrapper: any, testId: any) {\n  return findByTestID(wrapper, testId).length > 0;\n}\n\nfunction mount(options: any, done: any) {\n  options = getOptions(options);\n  return enzyme.mount(\n    <GeneralSettings\n      visualizationName=\"Test\"\n      data={{ columns: [], rows: [] }}\n      options={options}\n      onOptionsChange={changedOptions => {\n        expect(changedOptions).toMatchSnapshot();\n        done();\n      }}\n    />\n  );\n}\n\ndescribe(\"Visualizations -> Chart -> Editor -> General Settings\", () => {\n  test(\"Changes global series type\", done => {\n    const el = mount(\n      {\n        globalSeriesType: \"column\",\n        showDataLabels: false,\n        seriesOptions: {\n          a: { type: \"column\" },\n          b: { type: \"line\" },\n        },\n      },\n      done\n    );\n\n    findByTestID(el, \"Chart.GlobalSeriesType\")\n      .last()\n      .simulate(\"mouseDown\");\n    findByTestID(el, \"Chart.ChartType.pie\")\n      .last()\n      .simulate(\"click\");\n  });\n\n  test(\"Pie: changes direction\", done => {\n    const el = mount(\n      {\n        globalSeriesType: \"pie\",\n        direction: { type: \"counterclockwise\" },\n      },\n      done\n    );\n\n    findByTestID(el, \"Chart.PieDirection\")\n      .last()\n      .simulate(\"mouseDown\");\n    findByTestID(el, \"Chart.PieDirection.Clockwise\")\n      .last()\n      .simulate(\"click\");\n  });\n\n  test(\"Toggles legend\", done => {\n    const el = mount(\n      {\n        globalSeriesType: \"column\",\n        legend: { enabled: true },\n      },\n      done\n    );\n\n    findByTestID(el, \"Chart.LegendPlacement\")\n      .last()\n      .simulate(\"mouseDown\");\n    findByTestID(el, \"Chart.LegendPlacement.HideLegend\")\n      .last()\n      .simulate(\"click\");\n  });\n\n  test(\"Box: toggles show points\", done => {\n    const el = mount(\n      {\n        globalSeriesType: \"box\",\n        showpoints: false,\n      },\n      done\n    );\n\n    findByTestID(el, \"Chart.ShowPoints\")\n      .last()\n      .find(\"input\")\n      .simulate(\"change\", { target: { checked: true } });\n  });\n\n  test(\"Enables stacking\", done => {\n    const el = mount(\n      {\n        globalSeriesType: \"column\",\n        series: {},\n      },\n      done\n    );\n\n    findByTestID(el, \"Chart.Stacking\")\n      .last()\n      .simulate(\"mouseDown\");\n    findByTestID(el, \"Chart.Stacking.Stack\")\n      .last()\n      .simulate(\"click\");\n  });\n\n  test(\"Toggles normalize values to percentage\", done => {\n    const el = mount(\n      {\n        globalSeriesType: \"column\",\n        series: {},\n      },\n      done\n    );\n\n    findByTestID(el, \"Chart.NormalizeValues\")\n      .last()\n      .find(\"input\")\n      .simulate(\"change\", { target: { checked: true } });\n  });\n\n  test(\"Keep missing/null values\", done => {\n    const el = mount(\n      {\n        globalSeriesType: \"column\",\n        missingValuesAsZero: true,\n      },\n      done\n    );\n\n    findByTestID(el, \"Chart.MissingValues\")\n      .last()\n      .simulate(\"mouseDown\");\n    findByTestID(el, \"Chart.MissingValues.Keep\")\n      .last()\n      .simulate(\"click\");\n  });\n\n  describe(\"Column mappings should be available\", () => {\n    test(\"for bubble\", () => {\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 1.\n      const el = mount({\n        globalSeriesType: \"column\",\n        seriesOptions: {\n          a: { type: \"column\" },\n          b: { type: \"bubble\" },\n          c: { type: \"heatmap\" },\n        },\n      });\n\n      expect(elementExists(el, \"Chart.ColumnMapping.x\")).toBeTruthy();\n      expect(elementExists(el, \"Chart.ColumnMapping.y\")).toBeTruthy();\n      expect(elementExists(el, \"Chart.ColumnMapping.size\")).toBeTruthy();\n    });\n\n    test(\"for heatmap\", () => {\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 1.\n      const el = mount({\n        globalSeriesType: \"heatmap\",\n        seriesOptions: {\n          a: { type: \"column\" },\n          b: { type: \"bubble\" },\n          c: { type: \"heatmap\" },\n        },\n      });\n\n      expect(elementExists(el, \"Chart.ColumnMapping.x\")).toBeTruthy();\n      expect(elementExists(el, \"Chart.ColumnMapping.y\")).toBeTruthy();\n      expect(elementExists(el, \"Chart.ColumnMapping.zVal\")).toBeTruthy();\n    });\n\n    test(\"for all types except of bubble, heatmap and custom\", () => {\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 1.\n      const el = mount({\n        globalSeriesType: \"column\",\n        seriesOptions: {\n          a: { type: \"column\" },\n          b: { type: \"bubble\" },\n          c: { type: \"heatmap\" },\n        },\n      });\n\n      expect(elementExists(el, \"Chart.ColumnMapping.x\")).toBeTruthy();\n      expect(elementExists(el, \"Chart.ColumnMapping.y\")).toBeTruthy();\n      expect(elementExists(el, \"Chart.ColumnMapping.series\")).toBeTruthy();\n      expect(elementExists(el, \"Chart.ColumnMapping.yError\")).toBeTruthy();\n    });\n  });\n\n  test(\"Toggles horizontal bar chart\", done => {\n    const el = mount(\n      {\n        globalSeriesType: \"column\",\n        series: {},\n      },\n      done\n    );\n\n    findByTestID(el, \"Chart.SwappedAxes\")\n      .last()\n      .find(\"input\")\n      .simulate(\"change\", { target: { checked: true } });\n  });\n});\n"],"file":"GeneralSettings.test.js"}