{"version":3,"sources":["../../../../src/visualizations/chart/Editor/ColumnMappingSelect.tsx"],"names":["MappingTypes","x","label","y","multiple","series","yError","size","zVal","SwappedMappingTypes","ColumnMappingSelect","value","availableColumns","type","onChange","areAxesSwapped","options","v","undefined","column","c","defaultProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,CAAC,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GADgB;AAEnBC,EAAAA,CAAC,EAAE;AAAED,IAAAA,KAAK,EAAE,WAAT;AAAsBE,IAAAA,QAAQ,EAAE;AAAhC,GAFgB;AAGnBC,EAAAA,MAAM,EAAE;AAAEH,IAAAA,KAAK,EAAE;AAAT,GAHW;AAInBI,EAAAA,MAAM,EAAE;AAAEJ,IAAAA,KAAK,EAAE;AAAT,GAJW;AAKnBK,EAAAA,IAAI,EAAE;AAAEL,IAAAA,KAAK,EAAE;AAAT,GALa;AAMnBM,EAAAA,IAAI,EAAE;AAAEN,IAAAA,KAAK,EAAE;AAAT;AANa,CAArB;;AASA,IAAMO,mBAAmB,qBACpBT,YADoB;AAEvBC,EAAAA,CAAC,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAFoB;AAGvBC,EAAAA,CAAC,EAAE;AAAED,IAAAA,KAAK,EAAE,WAAT;AAAsBE,IAAAA,QAAQ,EAAE;AAAhC;AAHoB,EAAzB;;AAee,SAASM,mBAAT,OAAiG;AAAA,MAAlEC,KAAkE,QAAlEA,KAAkE;AAAA,MAA3DC,gBAA2D,QAA3DA,gBAA2D;AAAA,MAAzCC,IAAyC,QAAzCA,IAAyC;AAAA,MAAnCC,SAAmC,QAAnCA,QAAmC;AAAA,MAAzBC,cAAyB,QAAzBA,cAAyB;AAC9G,MAAMC,OAAO,GAAG,oBAAO,oBAAO,kBAAK,qBAAQ,CAACJ,gBAAD,EAAmBD,KAAnB,CAAR,CAAL,CAAP,EAAiDM,CAAC,IAAI,sBAASA,CAAT,KAAeA,CAAC,KAAK,EAA3E,CAAP,CAAhB,CAD8G,CAG9G;;AAH8G,cAIlF,CAACF,cAAD,GAAkBf,YAAY,CAACa,IAAD,CAA9B,GAAuCJ,mBAAmB,CAACI,IAAD,CAJwB;AAAA,MAItGX,KAJsG,SAItGA,KAJsG;AAAA,MAI/FE,QAJ+F,SAI/FA,QAJ+F;;AAM9G;AAAA;AACE;AACA,iCAAC,eAAD,qBACE,6BAAC,cAAD;AACE,MAAA,KAAK,EAAEF,KADT;AAEE,iDAAkCW,IAAlC,CAFF;AAGE,MAAA,IAAI,EAAET,QAAQ,GAAG,UAAH,GAAgB,SAHhC;AAIE,MAAA,UAAU,MAJZ;AAKE,MAAA,UAAU,MALZ;AAME,MAAA,WAAW,EAAEA,QAAQ,GAAG,mBAAH,GAAyB,kBANhD;AAOE,MAAA,KAAK,EAAEO,KAAK,IAAIO,SAPlB,CAQE;AARF;AASE,MAAA,QAAQ,EAAGC,MAAD,IAAiBL,SAAQ,CAACK,MAAM,IAAI,IAAX,EAAiBN,IAAjB;AATrC,OAUG,iBAAIG,OAAJ,EAAaI,CAAC;AAAA;AACb;AACA,iCAAC,cAAD,CAAQ,MAAR;AAAe,MAAA,GAAG,EAAEA,CAApB;AAAuB,MAAA,KAAK,EAAEA,CAA9B;AAAiC,iDAAkCP,IAAlC,cAA0CO,CAA1C;AAAjC,OACGA,CADH,CAFD,CAVH,CADF;AAFF;AAuBD;;AAEDV,mBAAmB,CAACW,YAApB,GAAmC;AACjCV,EAAAA,KAAK,EAAE,IAD0B;AAEjCC,EAAAA,gBAAgB,EAAE,EAFe;AAGjCC,EAAAA,IAAI,EAAE,IAH2B;AAIjCC,EAAAA,QAAQ,EAAE,MAAM,CAAE;AAJe,CAAnC;AAOAJ,mBAAmB,CAACV,YAApB,GAAmCA,YAAnC","sourcesContent":["import { isString, map, uniq, flatten, filter, sortBy, keys } from \"lodash\";\nimport React from \"react\";\nimport { Section, Select } from \"@/components/visualizations/editor\";\n\nconst MappingTypes = {\n  x: { label: \"X Column\" },\n  y: { label: \"Y Columns\", multiple: true },\n  series: { label: \"Group by\" },\n  yError: { label: \"Errors column\" },\n  size: { label: \"Bubble Size Column\" },\n  zVal: { label: \"Color Column\" },\n};\n\nconst SwappedMappingTypes = {\n  ...MappingTypes,\n  x: { label: \"Y Column\" },\n  y: { label: \"X Columns\", multiple: true },\n};\n\ntype OwnProps = {\n  value?: string | string[];\n  availableColumns?: string[];\n  type?: any; // TODO: PropTypes.oneOf(keys(MappingTypes))\n  onChange?: (...args: any[]) => any;\n};\n\ntype Props = OwnProps & typeof ColumnMappingSelect.defaultProps;\n\nexport default function ColumnMappingSelect({ value, availableColumns, type, onChange, areAxesSwapped }: Props) {\n  const options = sortBy(filter(uniq(flatten([availableColumns, value])), v => isString(v) && v !== \"\"));\n\n  // this swaps the ui, as the data will be swapped on render\n  const { label, multiple } = !areAxesSwapped ? MappingTypes[type] : SwappedMappingTypes[type];\n\n  return (\n    // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n    <Section>\n      <Select\n        label={label}\n        data-test={`Chart.ColumnMapping.${type}`}\n        mode={multiple ? \"multiple\" : \"default\"}\n        allowClear\n        showSearch\n        placeholder={multiple ? \"Choose columns...\" : \"Choose column...\"}\n        value={value || undefined}\n        // @ts-expect-error ts-migrate(2349) FIXME: This expression is not callable.\n        onChange={(column: any) => onChange(column || null, type)}>\n        {map(options, c => (\n          // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\n          <Select.Option key={c} value={c} data-test={`Chart.ColumnMapping.${type}.${c}`}>\n            {c}\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n          </Select.Option>\n        ))}\n      </Select>\n    </Section>\n  );\n}\n\nColumnMappingSelect.defaultProps = {\n  value: null,\n  availableColumns: [],\n  type: null,\n  onChange: () => {},\n};\n\nColumnMappingSelect.MappingTypes = MappingTypes;\n"],"file":"ColumnMappingSelect.js"}