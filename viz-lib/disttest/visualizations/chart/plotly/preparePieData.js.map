{"version":3,"sources":["../../../../src/visualizations/chart/plotly/preparePieData.ts"],"names":["getPieDimensions","series","rows","length","cellsInRow","Math","ceil","cellWidth","cellHeight","xPadding","yPadding","getPieHoverInfoPattern","options","hasX","test","textFormat","result","prepareSeries","additionalOptions","index","hoverInfoPattern","getValueColor","seriesOptions","type","globalSeriesType","yAxis","name","xPosition","yPosition","floor","labels","values","sourceData","Map","seriesTotal","data","row","y","abs","x","xAxis","push","set","yPercent","markerColors","textColors","c","visible","hole","marker","colors","hoverinfo","text","textinfo","showDataLabels","textposition","textfont","color","direction","domain","preparePieData","seriesList","getDefaultColor","d3","scale","ordinal","range","ColorPaletteArray","valuesColors","valuesOptions","item","key","columnMapping","v"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEO,SAASA,gBAAT,CAA0BC,MAA1B,EAAuC;AAC5C,MAAMC,IAAI,GAAGD,MAAM,CAACE,MAAP,GAAgB,CAAhB,GAAoB,CAApB,GAAwB,CAArC;AACA,MAAMC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUL,MAAM,CAACE,MAAP,GAAgBD,IAA1B,CAAnB;AACA,MAAMK,SAAS,GAAG,IAAIH,UAAtB;AACA,MAAMI,UAAU,GAAG,IAAIN,IAAvB;AACA,MAAMO,QAAQ,GAAG,IAAjB;AACA,MAAMC,QAAQ,GAAG,GAAjB;AAEA,SAAO;AAAER,IAAAA,IAAF;AAAQE,IAAAA,UAAR;AAAoBG,IAAAA,SAApB;AAA+BC,IAAAA,UAA/B;AAA2CC,IAAAA,QAA3C;AAAqDC,IAAAA;AAArD,GAAP;AACD;;AAED,SAASC,sBAAT,CAAgCC,OAAhC,EAA8C;AAC5C,MAAMC,IAAI,GAAG,gBAAgBC,IAAhB,CAAqBF,OAAO,CAACG,UAA7B,CAAb;AACA,MAAIC,MAAM,GAAG,MAAb;AACA,MAAI,CAACH,IAAL,EAAWG,MAAM,IAAI,QAAV;AACX,SAAOA,MAAP;AACD;;AAED,SAASC,aAAT,CAAuBhB,MAAvB,EAAoCW,OAApC,EAAkDM,iBAAlD,EAA0E;AAAA,MAEtEX,SAFsE,GAWpEW,iBAXoE,CAEtEX,SAFsE;AAAA,MAGtEC,UAHsE,GAWpEU,iBAXoE,CAGtEV,UAHsE;AAAA,MAItEC,QAJsE,GAWpES,iBAXoE,CAItET,QAJsE;AAAA,MAKtEC,QALsE,GAWpEQ,iBAXoE,CAKtER,QALsE;AAAA,MAMtEN,UANsE,GAWpEc,iBAXoE,CAMtEd,UANsE;AAAA,MAOtES,IAPsE,GAWpEK,iBAXoE,CAOtEL,IAPsE;AAAA,MAQtEM,KARsE,GAWpED,iBAXoE,CAQtEC,KARsE;AAAA,MAStEC,gBATsE,GAWpEF,iBAXoE,CAStEE,gBATsE;AAAA,MAUtEC,aAVsE,GAWpEH,iBAXoE,CAUtEG,aAVsE;AAaxE,MAAMC,aAAa,GAAG,oBAAO;AAAEC,IAAAA,IAAI,EAAEX,OAAO,CAACY,gBAAhB;AAAkCC,IAAAA,KAAK,EAAE;AAAzC,GAAP,EAAqDb,OAAO,CAACU,aAAR,CAAsBrB,MAAM,CAACyB,IAA7B,CAArD,CAAtB;AAEA,MAAMC,SAAS,GAAIR,KAAK,GAAGf,UAAT,GAAuBG,SAAzC;AACA,MAAMqB,SAAS,GAAGvB,IAAI,CAACwB,KAAL,CAAWV,KAAK,GAAGf,UAAnB,IAAiCI,UAAnD;AAEA,MAAMsB,MAAW,GAAG,EAApB;AACA,MAAMC,MAAW,GAAG,EAApB;AACA,MAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AACA,MAAMC,WAAW,GAAG,oBAClBjC,MAAM,CAACkC,IADW,EAElB,CAACnB,MAAD,EAASoB,GAAT,KAAiB;AACf,QAAMC,CAAC,GAAG,wBAAYD,GAAG,CAACC,CAAhB,CAAV;AACA,WAAOrB,MAAM,GAAGX,IAAI,CAACiC,GAAL,CAASD,CAAT,CAAhB;AACD,GALiB,EAMlB,CANkB,CAApB;AAQA,oBAAKpC,MAAM,CAACkC,IAAZ,EAAkBC,GAAG,IAAI;AACvB,QAAMG,CAAC,GAAG1B,IAAI,GAAG,2BAAeuB,GAAG,CAACG,CAAnB,EAAsB3B,OAAO,CAAC4B,KAAR,CAAcjB,IAApC,CAAH,mBAAwDJ,KAAxD,CAAd;AACA,QAAMkB,CAAC,GAAG,wBAAYD,GAAG,CAACC,CAAhB,CAAV;AACAP,IAAAA,MAAM,CAACW,IAAP,CAAYF,CAAZ;AACAR,IAAAA,MAAM,CAACU,IAAP,CAAYJ,CAAZ;AACAL,IAAAA,UAAU,CAACU,GAAX,CAAeH,CAAf,EAAkB;AAChBA,MAAAA,CADgB;AAEhBF,MAAAA,CAFgB;AAGhBM,MAAAA,QAAQ,EAAGN,CAAC,GAAGH,WAAL,GAAoB,GAHd;AAIhBE,MAAAA;AAJgB,KAAlB;AAMD,GAXD;AAaA,MAAMQ,YAAY,GAAG,iBAAI3C,MAAM,CAACkC,IAAX,EAAiBC,GAAG,IAAIf,aAAa,CAACe,GAAG,CAACG,CAAL,CAArC,CAArB;AACA,MAAMM,UAAU,GAAG,iBAAID,YAAJ,EAAkBE,CAAC,IAAI,2CAA6BA,CAA7B,CAAvB,CAAnB;AAEA,SAAO;AACLC,IAAAA,OAAO,EAAE,IADJ;AAELhB,IAAAA,MAFK;AAGLD,IAAAA,MAHK;AAILP,IAAAA,IAAI,EAAE,KAJD;AAKLyB,IAAAA,IAAI,EAAE,GALD;AAMLC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAEN;AADF,KANH;AASLO,IAAAA,SAAS,EAAE/B,gBATN;AAULgC,IAAAA,IAAI,EAAE,EAVD;AAWLC,IAAAA,QAAQ,EAAEzC,OAAO,CAAC0C,cAAR,GAAyB,SAAzB,GAAqC,MAX1C;AAYLC,IAAAA,YAAY,EAAE,QAZT;AAaLC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAEZ;AADC,KAbL;AAgBLnB,IAAAA,IAAI,EAAEJ,aAAa,CAACI,IAAd,IAAsBzB,MAAM,CAACyB,IAhB9B;AAiBLgC,IAAAA,SAAS,EAAE9C,OAAO,CAAC8C,SAAR,CAAkBnC,IAjBxB;AAkBLoC,IAAAA,MAAM,EAAE;AACNpB,MAAAA,CAAC,EAAE,CAACZ,SAAD,EAAYA,SAAS,GAAGpB,SAAZ,GAAwBE,QAApC,CADG;AAEN4B,MAAAA,CAAC,EAAE,CAACT,SAAD,EAAYA,SAAS,GAAGpB,UAAZ,GAAyBE,QAArC;AAFG,KAlBH;AAsBLsB,IAAAA;AAtBK,GAAP;AAwBD;;AAEc,SAAS4B,cAAT,CAAwBC,UAAxB,EAAyCjD,OAAzC,EAAuD;AACpE;AACA;AACA,MAAMkD,eAAe,GAAGC,WAAGC,KAAH,CACrBC,OADqB,GAErBN,MAFqB,CAEd,EAFc,EAGrBO,KAHqB,CAGfC,+BAHe,CAAxB;;AAIA,MAAMC,YAAY,GAAG,EAArB;AACA,oBAAKxD,OAAO,CAACyD,aAAb,EAA4B,CAACC,IAAD,EAAOC,GAAP,KAAe;AACzC,QAAI,sBAASD,IAAI,CAACb,KAAd,KAAwBa,IAAI,CAACb,KAAL,KAAe,EAA3C,EAA+C;AAC7C;AACAW,MAAAA,YAAY,CAACG,GAAD,CAAZ,GAAoBD,IAAI,CAACb,KAAzB;AACD;AACF,GALD;;AAOA,MAAMvC,iBAAiB,qBAClBlB,gBAAgB,CAAC6D,UAAD,CADE;AAErBhD,IAAAA,IAAI,EAAE,sBAASD,OAAO,CAAC4D,aAAjB,EAAgC,GAAhC,CAFe;AAGrBpD,IAAAA,gBAAgB,EAAET,sBAAsB,CAACC,OAAD,CAHnB;AAIrB;AACAS,IAAAA,aAAa,EAAGoD,CAAD,IAAYL,YAAY,CAACK,CAAD,CAAZ,IAAmBX,eAAe,CAACW,CAAD;AALxC,IAAvB;;AAQA,SAAO,iBAAIZ,UAAJ,EAAgB,CAAC5D,MAAD,EAASkB,KAAT,KAAmBF,aAAa,CAAChB,MAAD,EAASW,OAAT,oBAAuBM,iBAAvB;AAA0CC,IAAAA;AAA1C,KAAhD,CAAP;AACD","sourcesContent":["import { isString, each, extend, includes, map, reduce } from \"lodash\";\nimport d3 from \"d3\";\nimport chooseTextColorForBackground from \"@/lib/chooseTextColorForBackground\";\nimport { ColorPaletteArray } from \"@/visualizations/ColorPalette\";\n\nimport { cleanNumber, normalizeValue } from \"./utils\";\n\nexport function getPieDimensions(series: any) {\n  const rows = series.length > 2 ? 2 : 1;\n  const cellsInRow = Math.ceil(series.length / rows);\n  const cellWidth = 1 / cellsInRow;\n  const cellHeight = 1 / rows;\n  const xPadding = 0.02;\n  const yPadding = 0.1;\n\n  return { rows, cellsInRow, cellWidth, cellHeight, xPadding, yPadding };\n}\n\nfunction getPieHoverInfoPattern(options: any) {\n  const hasX = /{{\\s*@@x\\s*}}/.test(options.textFormat);\n  let result = \"text\";\n  if (!hasX) result += \"+label\";\n  return result;\n}\n\nfunction prepareSeries(series: any, options: any, additionalOptions: any) {\n  const {\n    cellWidth,\n    cellHeight,\n    xPadding,\n    yPadding,\n    cellsInRow,\n    hasX,\n    index,\n    hoverInfoPattern,\n    getValueColor,\n  } = additionalOptions;\n\n  const seriesOptions = extend({ type: options.globalSeriesType, yAxis: 0 }, options.seriesOptions[series.name]);\n\n  const xPosition = (index % cellsInRow) * cellWidth;\n  const yPosition = Math.floor(index / cellsInRow) * cellHeight;\n\n  const labels: any = [];\n  const values: any = [];\n  const sourceData = new Map();\n  const seriesTotal = reduce(\n    series.data,\n    (result, row) => {\n      const y = cleanNumber(row.y);\n      return result + Math.abs(y);\n    },\n    0\n  );\n  each(series.data, row => {\n    const x = hasX ? normalizeValue(row.x, options.xAxis.type) : `Slice ${index}`;\n    const y = cleanNumber(row.y);\n    labels.push(x);\n    values.push(y);\n    sourceData.set(x, {\n      x,\n      y,\n      yPercent: (y / seriesTotal) * 100,\n      row,\n    });\n  });\n\n  const markerColors = map(series.data, row => getValueColor(row.x));\n  const textColors = map(markerColors, c => chooseTextColorForBackground(c));\n\n  return {\n    visible: true,\n    values,\n    labels,\n    type: \"pie\",\n    hole: 0.4,\n    marker: {\n      colors: markerColors,\n    },\n    hoverinfo: hoverInfoPattern,\n    text: [],\n    textinfo: options.showDataLabels ? \"percent\" : \"none\",\n    textposition: \"inside\",\n    textfont: {\n      color: textColors,\n    },\n    name: seriesOptions.name || series.name,\n    direction: options.direction.type,\n    domain: {\n      x: [xPosition, xPosition + cellWidth - xPadding],\n      y: [yPosition, yPosition + cellHeight - yPadding],\n    },\n    sourceData,\n  };\n}\n\nexport default function preparePieData(seriesList: any, options: any) {\n  // we will use this to assign colors for values that have no explicitly set color\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'scale' does not exist on type 'typeof im... Remove this comment to see the full error message\n  const getDefaultColor = d3.scale\n    .ordinal()\n    .domain([])\n    .range(ColorPaletteArray);\n  const valuesColors = {};\n  each(options.valuesOptions, (item, key) => {\n    if (isString(item.color) && item.color !== \"\") {\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      valuesColors[key] = item.color;\n    }\n  });\n\n  const additionalOptions = {\n    ...getPieDimensions(seriesList),\n    hasX: includes(options.columnMapping, \"x\"),\n    hoverInfoPattern: getPieHoverInfoPattern(options),\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    getValueColor: (v: any) => valuesColors[v] || getDefaultColor(v),\n  };\n\n  return map(seriesList, (series, index) => prepareSeries(series, options, { ...additionalOptions, index }));\n}\n"],"file":"preparePieData.js"}