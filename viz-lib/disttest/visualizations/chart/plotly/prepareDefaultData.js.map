{"version":3,"sources":["../../../../src/visualizations/chart/plotly/prepareDefaultData.ts"],"names":["getSeriesColor","seriesOptions","seriesIndex","color","ColorPaletteArray","length","getHoverInfoPattern","options","hasX","test","textFormat","hasName","result","prepareBarSeries","series","additionalOptions","type","offsetgroup","index","showDataLabels","textposition","prepareLineSeries","mode","prepareAreaSeries","fill","stacking","prepareScatterSeries","prepareBubbleSeries","seriesColor","data","coefficient","marker","size","i","sizemode","prepareBoxSeries","boxpoints","hoverinfo","showpoints","jitter","pointpos","prepareSeries","hoverInfoPattern","globalSeriesType","yAxis","name","seriesYAxis","sortX","d","x","xAxis","cleanYValue","normalizeValue","v","missingValuesAsZero","sourceData","Map","xValues","yValues","yErrorValues","row","y","yError","set","yPercent","push","plotlySeries","visible","error_y","array","insidetextfont","yaxis","prepareDefaultData","seriesList"],"mappings":"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","sourcesContent":["import { isNil, extend, each, includes, map, sortBy, toString } from \"lodash\";\nimport chooseTextColorForBackground from \"@/lib/chooseTextColorForBackground\";\nimport { ColorPaletteArray } from \"@/visualizations/ColorPalette\";\nimport { cleanNumber, normalizeValue, getSeriesAxis } from \"./utils\";\n\nfunction getSeriesColor(seriesOptions: any, seriesIndex: any) {\n  return seriesOptions.color || ColorPaletteArray[seriesIndex % ColorPaletteArray.length];\n}\n\nfunction getHoverInfoPattern(options: any) {\n  const hasX = /{{\\s*@@x\\s*}}/.test(options.textFormat);\n  const hasName = /{{\\s*@@name\\s*}}/.test(options.textFormat);\n  let result = \"text\";\n  if (!hasX) result += \"+x\";\n  if (!hasName) result += \"+name\";\n  return result;\n}\n\nfunction prepareBarSeries(series: any, options: any, additionalOptions: any) {\n  series.type = \"bar\";\n  series.offsetgroup = toString(additionalOptions.index);\n  if (options.showDataLabels) {\n    series.textposition = \"inside\";\n  }\n  return series;\n}\n\nfunction prepareLineSeries(series: any, options: any) {\n  series.mode = \"lines\" + (options.showDataLabels ? \"+text\" : \"\");\n  return series;\n}\n\nfunction prepareAreaSeries(series: any, options: any) {\n  series.mode = \"lines\" + (options.showDataLabels ? \"+text\" : \"\");\n  series.fill = options.series.stacking ? \"tonexty\" : \"tozeroy\";\n  return series;\n}\n\nfunction prepareScatterSeries(series: any, options: any) {\n  series.type = \"scatter\";\n  series.mode = \"markers\" + (options.showDataLabels ? \"+text\" : \"\");\n  return series;\n}\n\nfunction prepareBubbleSeries(series: any, options: any, { seriesColor, data }: any) {\n  const coefficient = options.coefficient || 1;\n  series.mode = \"markers\";\n  series.marker = {\n    color: seriesColor,\n    size: map(data, i => i.size * coefficient),\n    sizemode: options.sizemode || \"diameter\",\n  };\n  return series;\n}\n\nfunction prepareBoxSeries(series: any, options: any, { seriesColor }: any) {\n  series.type = \"box\";\n  series.mode = \"markers\";\n\n  series.boxpoints = \"outliers\";\n  series.hoverinfo = false;\n  series.marker = {\n    color: seriesColor,\n    size: 3,\n  };\n  if (options.showpoints) {\n    series.boxpoints = \"all\";\n    series.jitter = 0.3;\n    series.pointpos = -1.8;\n  }\n  return series;\n}\n\nfunction prepareSeries(series: any, options: any, additionalOptions: any) {\n  const { hoverInfoPattern, index } = additionalOptions;\n\n  const seriesOptions = extend({ type: options.globalSeriesType, yAxis: 0 }, options.seriesOptions[series.name]);\n  const seriesColor = getSeriesColor(seriesOptions, index);\n  const seriesYAxis = getSeriesAxis(series, options);\n\n  // Sort by x - `Map` preserves order of items\n  const data = options.sortX ? sortBy(series.data, d => normalizeValue(d.x, options.xAxis.type)) : series.data;\n\n  // For bubble/scatter charts `y` may be any (similar to `x`) - numeric is only bubble size;\n  // for other types `y` is always number\n  const cleanYValue = includes([\"bubble\", \"scatter\"], seriesOptions.type)\n    ? normalizeValue\n    : (v: any) => {\n        v = cleanNumber(v);\n        return options.missingValuesAsZero && isNil(v) ? 0.0 : v;\n      };\n\n  const sourceData = new Map();\n  const xValues: any = [];\n  const yValues: any = [];\n  const yErrorValues: any = [];\n  each(data, row => {\n    const x = normalizeValue(row.x, options.xAxis.type); // number/datetime/category\n    const y = cleanYValue(row.y, seriesYAxis === \"y2\" ? options.yAxis[1].type : options.yAxis[0].type); // depends on series type!\n    const yError = cleanNumber(row.yError); // always number\n    const size = cleanNumber(row.size); // always number\n    sourceData.set(x, {\n      x,\n      y,\n      yError,\n      size,\n      yPercent: null, // will be updated later\n      row,\n    });\n    xValues.push(x);\n    yValues.push(y);\n    yErrorValues.push(yError);\n  });\n\n  const plotlySeries = {\n    visible: true,\n    hoverinfo: hoverInfoPattern,\n    x: xValues,\n    y: yValues,\n    error_y: {\n      array: yErrorValues,\n      color: seriesColor,\n    },\n    name: seriesOptions.name || series.name,\n    marker: { color: seriesColor },\n    insidetextfont: {\n      color: chooseTextColorForBackground(seriesColor),\n    },\n    yaxis: seriesYAxis,\n    sourceData,\n  };\n\n  additionalOptions = { ...additionalOptions, seriesColor, data };\n\n  switch (seriesOptions.type) {\n    case \"column\":\n      return prepareBarSeries(plotlySeries, options, additionalOptions);\n    case \"line\":\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 3.\n      return prepareLineSeries(plotlySeries, options, additionalOptions);\n    case \"area\":\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 3.\n      return prepareAreaSeries(plotlySeries, options, additionalOptions);\n    case \"scatter\":\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 3.\n      return prepareScatterSeries(plotlySeries, options, additionalOptions);\n    case \"bubble\":\n      return prepareBubbleSeries(plotlySeries, options, additionalOptions);\n    case \"box\":\n      return prepareBoxSeries(plotlySeries, options, additionalOptions);\n    default:\n      return plotlySeries;\n  }\n}\n\nexport default function prepareDefaultData(seriesList: any, options: any) {\n  const additionalOptions = {\n    hoverInfoPattern: getHoverInfoPattern(options),\n  };\n\n  return map(seriesList, (series, index) => prepareSeries(series, options, { ...additionalOptions, index }));\n}\n"],"file":"prepareDefaultData.js"}