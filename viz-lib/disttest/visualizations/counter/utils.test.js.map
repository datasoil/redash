{"version":3,"sources":["../../../src/visualizations/counter/utils.test.ts"],"names":["dummy","describe","beforeEach","rows","city","population","options","visualisationName","result","counterLabel","counterValue","targetValue","counterValueTooltip","targetValueTooltip","test","expect","toEqual","showTrend","rowNumber","result2","counterColName","targetRowNumber","targetColName","trendPositive","countRow"],"mappings":"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","sourcesContent":["import { getCounterData } from \"./utils\";\n\nlet dummy: any;\n\ndescribe(\"Visualizations -> Counter -> Utils\", () => {\n  beforeEach(() => {\n    dummy = {\n      rows: [\n        { city: \"New York City\", population: 18604000 },\n        { city: \"Shangai\", population: 24484000 },\n        { city: \"Tokyo\", population: 38140000 },\n      ],\n      options: {},\n      visualisationName: \"Visualisation Name\",\n      result: {\n        counterLabel: \"Visualisation Name\",\n        counterValue: \"\",\n        targetValue: null,\n        counterValueTooltip: \"\",\n        targetValueTooltip: \"\",\n      },\n    };\n  });\n\n  describe(\"getCounterData()\", () => {\n    describe('\"Count rows\" option is disabled', () => {\n      test(\"No target and counter values return empty result\", () => {\n        const result = getCounterData(dummy.rows, dummy.options, dummy.visualisationName);\n        expect(result).toEqual({\n          ...dummy.result,\n          showTrend: false,\n        });\n      });\n\n      test('\"Counter label\" overrides vizualization name', () => {\n        const result = getCounterData(dummy.rows, { counterLabel: \"Counter Label\" }, dummy.visualisationName);\n        expect(result).toEqual({\n          ...dummy.result,\n          counterLabel: \"Counter Label\",\n          showTrend: false,\n        });\n      });\n\n      test('\"Counter Value Column Name\" must be set to a correct non empty value', () => {\n        const result = getCounterData(dummy.rows, { rowNumber: 3 }, dummy.visualisationName);\n        expect(result).toEqual({\n          ...dummy.result,\n          showTrend: false,\n        });\n\n        const result2 = getCounterData(dummy.rows, { counterColName: \"missingColumn\" }, dummy.visualisationName);\n        expect(result2).toEqual({\n          ...dummy.result,\n          showTrend: false,\n        });\n      });\n\n      test('\"Counter Value Column Name\" uses correct column', () => {\n        const result = getCounterData(dummy.rows, { counterColName: \"population\" }, dummy.visualisationName);\n        expect(result).toEqual({\n          ...dummy.result,\n          counterValue: \"18,604,000.000\",\n          counterValueTooltip: \"18,604,000\",\n          showTrend: false,\n        });\n      });\n\n      test(\"Counter and target values return correct result including trend\", () => {\n        const result = getCounterData(\n          dummy.rows,\n          {\n            rowNumber: 1,\n            counterColName: \"population\",\n            targetRowNumber: 2,\n            targetColName: \"population\",\n          },\n          dummy.visualisationName\n        );\n        expect(result).toEqual({\n          ...dummy.result,\n          counterValue: \"18,604,000.000\",\n          counterValueTooltip: \"18,604,000\",\n          targetValue: \"24484000\",\n          targetValueTooltip: \"24,484,000\",\n          showTrend: true,\n          trendPositive: false,\n        });\n\n        const result2 = getCounterData(\n          dummy.rows,\n          {\n            rowNumber: 2,\n            counterColName: \"population\",\n            targetRowNumber: 1,\n            targetColName: \"population\",\n          },\n          dummy.visualisationName\n        );\n        expect(result2).toEqual({\n          ...dummy.result,\n          counterValue: \"24,484,000.000\",\n          counterValueTooltip: \"24,484,000\",\n          targetValue: \"18604000\",\n          targetValueTooltip: \"18,604,000\",\n          showTrend: true,\n          trendPositive: true,\n        });\n      });\n    });\n\n    describe('\"Count rows\" option is enabled', () => {\n      beforeEach(() => {\n        dummy.result = {\n          ...dummy.result,\n          counterValue: \"3.000\",\n          counterValueTooltip: \"3\",\n          showTrend: false,\n        };\n      });\n\n      test(\"Rows are counted correctly\", () => {\n        const result = getCounterData(dummy.rows, { countRow: true }, dummy.visualisationName);\n        expect(result).toEqual(dummy.result);\n      });\n\n      test(\"Counter value is ignored\", () => {\n        const result = getCounterData(\n          dummy.rows,\n          {\n            countRow: true,\n            rowNumber: 3,\n            counterColName: \"population\",\n          },\n          dummy.visualisationName\n        );\n        expect(result).toEqual(dummy.result);\n      });\n\n      test(\"Target value and trend are computed correctly\", () => {\n        const result = getCounterData(\n          dummy.rows,\n          {\n            countRow: true,\n            targetRowNumber: 2,\n            targetColName: \"population\",\n          },\n          dummy.visualisationName\n        );\n        expect(result).toEqual({\n          ...dummy.result,\n          targetValue: \"24484000\",\n          targetValueTooltip: \"24,484,000\",\n          showTrend: true,\n          trendPositive: false,\n        });\n      });\n\n      test(\"Empty rows return counter value 0\", () => {\n        const result = getCounterData([], { countRow: true }, dummy.visualisationName);\n        expect(result).toEqual({\n          ...dummy.result,\n          counterValue: \"0.000\",\n          counterValueTooltip: \"0\",\n        });\n      });\n    });\n  });\n});\n"],"file":"utils.test.js"}