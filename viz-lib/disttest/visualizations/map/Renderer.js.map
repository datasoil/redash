{"version":3,"sources":["../../../src/visualizations/map/Renderer.tsx"],"names":["useMemoWithDeepCompare","create","inputs","valueRef","value","current","Renderer","data","options","onOptionsChange","container","setContainer","optionsWithoutBounds","groups","map","setMap","_map","destroy","updateLayers","updateBounds","bounds","onBoundsChange","propTypes","RendererPropTypes"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,sBAAT,CAAgCC,MAAhC,EAA6CC,MAA7C,EAA0D;AACxD,MAAMC,QAAQ,GAAG,oBAAjB;AACA,MAAMC,KAAK,GAAG,oBAAQH,MAAR,EAAgBC,MAAhB,CAAd;;AACA,MAAI,CAAC,qBAAQE,KAAR,EAAeD,QAAQ,CAACE,OAAxB,CAAL,EAAuC;AACrC;AACAF,IAAAA,QAAQ,CAACE,OAAT,GAAmBD,KAAnB;AACD;;AACD,SAAOD,QAAQ,CAACE,OAAhB;AACD;;AAEc,SAASC,QAAT,OAA2D;AAAA,MAAvCC,IAAuC,QAAvCA,IAAuC;AAAA,MAAjCC,OAAiC,QAAjCA,OAAiC;AAAA,MAAxBC,eAAwB,QAAxBA,eAAwB;;AAAA,kBACtC,qBAAS,IAAT,CADsC;AAAA;AAAA,MACjEC,SADiE;AAAA,MACtDC,YADsD;;AAGxE,MAAMC,oBAAoB,GAAGZ,sBAAsB,CAAC,MAAM,kBAAKQ,OAAL,EAAc,CAAC,QAAD,CAAd,CAAP,EAAkC,CAACA,OAAD,CAAlC,CAAnD;AAEA,MAAMK,MAAM,GAAG,oBAAQ,MAAM,0BAAYN,IAAZ,EAAkBK,oBAAlB,CAAd,EAAuD,CAACL,IAAD,EAAOK,oBAAP,CAAvD,CAAf;;AALwE,mBAOlD,qBAAS,IAAT,CAPkD;AAAA;AAAA,MAOjEE,GAPiE;AAAA,MAO5DC,MAP4D;;AASxE,wBAAU,MAAM;AACd,QAAIL,SAAJ,EAAe;AACb,UAAMM,IAAI,GAAG,sBAAQN,SAAR,CAAb,CADa,CAEb;;;AACAK,MAAAA,MAAM,CAACC,IAAD,CAAN;AACA,aAAO,MAAM;AACXA,QAAAA,IAAI,CAACC,OAAL;AACD,OAFD;AAGD;AACF,GATD,EASG,CAACP,SAAD,CATH;AAWA,wBAAU,MAAM;AACd,QAAII,GAAJ,EAAS;AACP;AACAA,MAAAA,GAAG,CAACI,YAAJ,CAAiBL,MAAjB,EAAyBD,oBAAzB;AACD;AACF,GALD,EAKG,CAACE,GAAD,EAAMD,MAAN,EAAcD,oBAAd,CALH;AAOA,wBAAU,MAAM;AACd,QAAIE,GAAJ,EAAS;AACP;AACAA,MAAAA,GAAG,CAACK,YAAJ,CAAiBX,OAAO,CAACY,MAAzB;AACD;AACF,GALD,EAKG,CAACN,GAAD,EAAMN,OAAO,CAACY,MAAd,CALH;AAOA,wBAAU,MAAM;AACd,QAAIN,GAAG,IAAIL,eAAX,EAA4B;AAC1B;AACAK,MAAAA,GAAG,CAACO,cAAJ,GAAsBD,MAAD,IAAiB;AACpCX,QAAAA,eAAe,CAAC,mBAAM,EAAN,EAAUD,OAAV,EAAmB;AAAEY,UAAAA;AAAF,SAAnB,CAAD,CAAf;AACD,OAFD;AAGD;AACF,GAPD,EAOG,CAACN,GAAD,EAAMN,OAAN,EAAeC,eAAf,CAPH,EAlCwE,CA2CxE;;AACA,sBAAO;AAAK,IAAA,SAAS,EAAC,6BAAf;AAA6C,IAAA,GAAG,EAAEE;AAAlD,IAAP;AACD;;AAEDL,QAAQ,CAACgB,SAAT,GAAqBC,4BAArB","sourcesContent":["import { isEqual, omit, merge } from \"lodash\";\nimport React, { useState, useEffect, useRef, useMemo } from \"react\";\nimport { RendererPropTypes } from \"@/visualizations/prop-types\";\n\nimport prepareData from \"./prepareData\";\nimport initMap from \"./initMap\";\n\nfunction useMemoWithDeepCompare(create: any, inputs: any) {\n  const valueRef = useRef();\n  const value = useMemo(create, inputs);\n  if (!isEqual(value, valueRef.current)) {\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'unknown' is not assignable to type 'undefine... Remove this comment to see the full error message\n    valueRef.current = value;\n  }\n  return valueRef.current;\n}\n\nexport default function Renderer({ data, options, onOptionsChange }: any) {\n  const [container, setContainer] = useState(null);\n\n  const optionsWithoutBounds = useMemoWithDeepCompare(() => omit(options, [\"bounds\"]), [options]);\n\n  const groups = useMemo(() => prepareData(data, optionsWithoutBounds), [data, optionsWithoutBounds]);\n\n  const [map, setMap] = useState(null);\n\n  useEffect(() => {\n    if (container) {\n      const _map = initMap(container);\n      // @ts-expect-error ts-migrate(2345) FIXME: Argument of type '{ onBoundsChange: () => void; up... Remove this comment to see the full error message\n      setMap(_map);\n      return () => {\n        _map.destroy();\n      };\n    }\n  }, [container]);\n\n  useEffect(() => {\n    if (map) {\n      // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\n      map.updateLayers(groups, optionsWithoutBounds);\n    }\n  }, [map, groups, optionsWithoutBounds]);\n\n  useEffect(() => {\n    if (map) {\n      // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\n      map.updateBounds(options.bounds);\n    }\n  }, [map, options.bounds]);\n\n  useEffect(() => {\n    if (map && onOptionsChange) {\n      // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\n      map.onBoundsChange = (bounds: any) => {\n        onOptionsChange(merge({}, options, { bounds }));\n      };\n    }\n  }, [map, options, onOptionsChange]);\n\n  // @ts-expect-error ts-migrate(2322) FIXME: Type 'Dispatch<SetStateAction<null>>' is not assig... Remove this comment to see the full error message\n  return <div className=\"map-visualization-container\" ref={setContainer} />;\n}\n\nRenderer.propTypes = RendererPropTypes;\n"],"file":"Renderer.js"}