{"version":3,"sources":["../../src/lib/referenceCountingCache.ts"],"names":["createReferenceCountingCache","cleanupDelay","items","cleanup","item","key","refCount","get","getter","value","release"],"mappings":";;;;;;;AAAA;;AAEe,SAASA,4BAAT,GAAoE;AAAA,iFAAJ,EAAI;AAAA,+BAA5BC,YAA4B;AAAA,MAA5BA,YAA4B,kCAAb,IAAa;;AACjF,MAAMC,KAAK,GAAG,EAAd;AAEA,MAAMC,OAAO,GAAG,sBAAS,MAAM;AAC7B,sBAAKD,KAAL,EAAY,CAACE,IAAD,EAAOC,GAAP,KAAe;AACzB;AACA,UAAID,IAAI,CAACE,QAAL,IAAiB,CAArB,EAAwB;AACtB;AACA,eAAOJ,KAAK,CAACG,GAAD,CAAZ;AACD;AACF,KAND;AAOD,GARe,EAQbJ,YARa,CAAhB;;AAUA,WAASM,GAAT,CAAaF,GAAb,EAAuBG,MAAvB,EAAoC;AAClC;AACA,QAAI,CAACN,KAAK,CAACG,GAAD,CAAV,EAAiB;AACf;AACAH,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAa;AACXI,QAAAA,KAAK,EAAED,MAAM,EADF;AAEXF,QAAAA,QAAQ,EAAE;AAFC,OAAb;AAID,KARiC,CASlC;;;AACA,QAAMF,IAAI,GAAGF,KAAK,CAACG,GAAD,CAAlB;AACAD,IAAAA,IAAI,CAACE,QAAL,IAAiB,CAAjB;AACA,WAAOF,IAAI,CAACK,KAAZ;AACD;;AAED,WAASC,OAAT,CAAiBL,GAAjB,EAA2B;AACzB;AACA,QAAIH,KAAK,CAACG,GAAD,CAAT,EAAgB;AACd;AACA,UAAMD,IAAI,GAAGF,KAAK,CAACG,GAAD,CAAlB;;AACA,UAAID,IAAI,CAACE,QAAL,GAAgB,CAApB,EAAuB;AACrBF,QAAAA,IAAI,CAACE,QAAL,IAAiB,CAAjB;;AACA,YAAIF,IAAI,CAACE,QAAL,IAAiB,CAArB,EAAwB;AACtBH,UAAAA,OAAO;AACR;AACF;AACF;AACF;;AAED,SAAO;AAAEI,IAAAA,GAAF;AAAOG,IAAAA;AAAP,GAAP;AACD","sourcesContent":["import { each, debounce } from \"lodash\";\n\nexport default function createReferenceCountingCache({ cleanupDelay = 2000 } = {}) {\n  const items = {};\n\n  const cleanup = debounce(() => {\n    each(items, (item, key) => {\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'refCount' does not exist on type 'never'... Remove this comment to see the full error message\n      if (item.refCount <= 0) {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        delete items[key];\n      }\n    });\n  }, cleanupDelay);\n\n  function get(key: any, getter: any) {\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    if (!items[key]) {\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      items[key] = {\n        value: getter(),\n        refCount: 0,\n      };\n    }\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    const item = items[key];\n    item.refCount += 1;\n    return item.value;\n  }\n\n  function release(key: any) {\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    if (items[key]) {\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      const item = items[key];\n      if (item.refCount > 0) {\n        item.refCount -= 1;\n        if (item.refCount <= 0) {\n          cleanup();\n        }\n      }\n    }\n  }\n\n  return { get, release };\n}\n"],"file":"referenceCountingCache.js"}