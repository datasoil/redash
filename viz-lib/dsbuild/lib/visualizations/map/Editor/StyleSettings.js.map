{"version":3,"sources":["../../../../src/visualizations/map/Editor/StyleSettings.tsx"],"names":["mapTiles","name","url","CustomColorPalette","White","ColorPalette","getCustomIconOptionFields","iconShape","showIcon","showBackgroundColor","showBorderColor","StyleSettings","options","onOptionsChange","debouncedOnOptionsChange","isCustomMarkersStyleAllowed","classify","mapTileUrl","clusterMarkers","event","target","checked","customizeMarkers","marginBottom","iconFont","value","foregroundColor","backgroundColor","borderColor","propTypes","EditorPropTypes"],"mappings":"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","sourcesContent":["import { isNil, map } from \"lodash\";\nimport React, { useMemo } from \"react\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport { Section, Select, Checkbox, Input, ColorPicker, ContextHelp } from \"@/components/visualizations/editor\";\nimport { EditorPropTypes } from \"@/visualizations/prop-types\";\nimport ColorPalette from \"@/visualizations/ColorPalette\";\n\nconst mapTiles = [\n  {\n    name: \"OpenStreetMap\",\n    url: \"//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n  },\n  {\n    name: \"OpenStreetMap BW\",\n    url: \"//{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\",\n  },\n  {\n    name: \"OpenStreetMap DE\",\n    url: \"//{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png\",\n  },\n  {\n    name: \"OpenStreetMap FR\",\n    url: \"//{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png\",\n  },\n  {\n    name: \"OpenStreetMap Hot\",\n    url: \"//{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\",\n  },\n  {\n    name: \"Thunderforest\",\n    url: \"//{s}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png\",\n  },\n  {\n    name: \"Thunderforest Spinal\",\n    url: \"//{s}.tile.thunderforest.com/spinal-map/{z}/{x}/{y}.png\",\n  },\n  {\n    name: \"OpenMapSurfer\",\n    url: \"//korona.geog.uni-heidelberg.de/tiles/roads/x={x}&y={y}&z={z}\",\n  },\n  {\n    name: \"Stamen Toner\",\n    url: \"//stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.png\",\n  },\n  {\n    name: \"Stamen Toner Background\",\n    url: \"//stamen-tiles-{s}.a.ssl.fastly.net/toner-background/{z}/{x}/{y}.png\",\n  },\n  {\n    name: \"Stamen Toner Lite\",\n    url: \"//stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.png\",\n  },\n  {\n    name: \"OpenTopoMap\",\n    url: \"//{s}.tile.opentopomap.org/{z}/{x}/{y}.png\",\n  },\n];\n\nconst CustomColorPalette = {\n  White: \"#ffffff\",\n  ...ColorPalette,\n};\n\nfunction getCustomIconOptionFields(iconShape: any) {\n  switch (iconShape) {\n    case \"doughnut\":\n      return { showIcon: false, showBackgroundColor: true, showBorderColor: true };\n    case \"circle-dot\":\n    case \"rectangle-dot\":\n      return { showIcon: false, showBackgroundColor: false, showBorderColor: true };\n    default:\n      return { showIcon: true, showBackgroundColor: true, showBorderColor: true };\n  }\n}\n\nexport default function StyleSettings({ options, onOptionsChange }: any) {\n  const [debouncedOnOptionsChange] = useDebouncedCallback(onOptionsChange, 200);\n\n  const { showIcon, showBackgroundColor, showBorderColor } = useMemo(\n    () => getCustomIconOptionFields(options.iconShape),\n    [options.iconShape]\n  );\n\n  const isCustomMarkersStyleAllowed = isNil(options.classify);\n\n  return (\n    <React.Fragment>\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Select\n          label=\"Map Tiles\"\n          data-test=\"Map.Editor.Tiles\"\n          value={options.mapTileUrl}\n          onChange={(mapTileUrl: any) => onOptionsChange({ mapTileUrl })}>\n          {map(mapTiles, ({ name, url }) => (\n            // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\n            <Select.Option key={url} data-test={\"Map.Editor.Tiles.\" + name}>\n              {name}\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          ))}\n        </Select>\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section.Title>Markers</Section.Title>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Checkbox\n          data-test=\"Map.Editor.ClusterMarkers\"\n          defaultChecked={options.clusterMarkers}\n          onChange={event => onOptionsChange({ clusterMarkers: event.target.checked })}>\n          Cluster Markers\n        </Checkbox>\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2746) FIXME: This JSX tag's 'children' prop expects a single ch... Remove this comment to see the full error message */}\n      <Section>\n        <Checkbox\n          data-test=\"Map.Editor.CustomizeMarkers\"\n          disabled={!isCustomMarkersStyleAllowed}\n          defaultChecked={options.customizeMarkers}\n          onChange={event => onOptionsChange({ customizeMarkers: event.target.checked })}>\n          Override default style\n        </Checkbox>\n        {!isCustomMarkersStyleAllowed && (\n          // @ts-expect-error ts-migrate(2746) FIXME: This JSX tag's 'children' prop expects a single ch... Remove this comment to see the full error message\n          <ContextHelp placement=\"topLeft\" arrowPointAtCenter>\n            Custom marker styles are not available\n            <br />\n            when <b>Group By</b> column selected.\n          </ContextHelp>\n        )}\n      </Section>\n\n      {isCustomMarkersStyleAllowed && options.customizeMarkers && (\n        <React.Fragment>\n          {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n          <Section>\n            <Select\n              layout=\"horizontal\"\n              label=\"Shape\"\n              data-test=\"Map.Editor.MarkerShape\"\n              value={options.iconShape}\n              onChange={(iconShape: any) => onOptionsChange({ iconShape })}>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option key=\"marker\" data-test=\"Map.Editor.MarkerShape.marker\">\n                Marker + Icon\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option key=\"doughnut\" data-test=\"Map.Editor.MarkerShape.doughnut\">\n                Circle\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option key=\"circle-dot\" data-test=\"Map.Editor.MarkerShape.circle-dot\">\n                Circle Dot\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option key=\"circle\" data-test=\"Map.Editor.MarkerShape.circle\">\n                Circle + Icon\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option key=\"rectangle-dot\" data-test=\"Map.Editor.MarkerShape.rectangle-dot\">\n                Square Dot\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option key=\"rectangle\" data-test=\"Map.Editor.MarkerShape.rectangle\">\n                Square + Icon\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n            </Select>\n          </Section>\n\n          {showIcon && (\n            // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n            <Section>\n              <Input\n                layout=\"horizontal\"\n                label={\n                  <React.Fragment>\n                    Icon\n                    {/* @ts-expect-error ts-migrate(2746) FIXME: This JSX tag's 'children' prop expects a single ch... Remove this comment to see the full error message */}\n                    <ContextHelp placement=\"topLeft\" arrowPointAtCenter>\n                      <div style={{ marginBottom: 5 }}>\n                        Enter an icon name from{\" \"}\n                        <a href=\"https://fontawesome.com/v4.7.0/icons/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                          Font-Awesome 4.7\n                        </a>\n                      </div>\n                      <div style={{ marginBottom: 5 }}>\n                        Examples: <code>check</code>, <code>times-circle</code>, <code>flag</code>\n                      </div>\n                      <div>Leave blank to remove.</div>\n                    </ContextHelp>\n                  </React.Fragment>\n                }\n                data-test=\"Map.Editor.MarkerIcon\"\n                defaultValue={options.iconFont}\n                onChange={(event: any) => debouncedOnOptionsChange({ iconFont: event.target.value })}\n              />\n            </Section>\n          )}\n\n          {showIcon && (\n            // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n            <Section>\n              <ColorPicker\n                layout=\"horizontal\"\n                label=\"Icon Color\"\n                interactive\n                presetColors={CustomColorPalette}\n                placement=\"topRight\"\n                color={options.foregroundColor}\n                triggerProps={{ \"data-test\": \"Map.Editor.MarkerIconColor\" }}\n                onChange={(foregroundColor: any) => onOptionsChange({ foregroundColor })}\n                // @ts-expect-error ts-migrate(2339) FIXME: Property 'Label' does not exist on type '({ classN... Remove this comment to see the full error message\n                addonAfter={<ColorPicker.Label color={options.foregroundColor} presetColors={CustomColorPalette} />}\n              />\n            </Section>\n          )}\n\n          {showBackgroundColor && (\n            // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n            <Section>\n              <ColorPicker\n                layout=\"horizontal\"\n                label=\"Background Color\"\n                interactive\n                presetColors={CustomColorPalette}\n                placement=\"topRight\"\n                color={options.backgroundColor}\n                triggerProps={{ \"data-test\": \"Map.Editor.MarkerBackgroundColor\" }}\n                onChange={(backgroundColor: any) => onOptionsChange({ backgroundColor })}\n                // @ts-expect-error ts-migrate(2339) FIXME: Property 'Label' does not exist on type '({ classN... Remove this comment to see the full error message\n                addonAfter={<ColorPicker.Label color={options.backgroundColor} presetColors={CustomColorPalette} />}\n              />\n            </Section>\n          )}\n\n          {showBorderColor && (\n            // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n            <Section>\n              <ColorPicker\n                layout=\"horizontal\"\n                label=\"Border Color\"\n                interactive\n                presetColors={CustomColorPalette}\n                placement=\"topRight\"\n                color={options.borderColor}\n                triggerProps={{ \"data-test\": \"Map.Editor.MarkerBorderColor\" }}\n                onChange={(borderColor: any) => onOptionsChange({ borderColor })}\n                // @ts-expect-error ts-migrate(2339) FIXME: Property 'Label' does not exist on type '({ classN... Remove this comment to see the full error message\n                addonAfter={<ColorPicker.Label color={options.borderColor} presetColors={CustomColorPalette} />}\n              />\n            </Section>\n          )}\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n\nStyleSettings.propTypes = EditorPropTypes;\n"],"file":"StyleSettings.js"}