{"version":3,"sources":["../../../../src/visualizations/choropleth/Editor/BoundsSettings.tsx"],"names":["BoundsSettings","options","onOptionsChange","bounds","setBounds","onOptionsChangeDebounced","mapType","geoJson","defaultBounds","updateBounds","i","j","v","parseFloat","newBounds","boundsAvailable","undefined","value","propTypes","EditorPropTypes"],"mappings":"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","sourcesContent":["import { isArray, isFinite, cloneDeep } from \"lodash\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport * as Grid from \"antd/lib/grid\";\nimport { Section, InputNumber, ControlLabel } from \"@/components/visualizations/editor\";\nimport { EditorPropTypes } from \"@/visualizations/prop-types\";\n\nimport useLoadGeoJson from \"../hooks/useLoadGeoJson\";\nimport { getGeoJsonBounds } from \"./utils\";\n\nexport default function BoundsSettings({ options, onOptionsChange }: any) {\n  // Bounds may be changed in editor or on preview (by drag/zoom map).\n  // Changes from preview does not come frequently (only when user release mouse button),\n  // but changes from editor should be debounced.\n  // Therefore this component has intermediate state to hold immediate user input,\n  // which is updated from `options.bounds` and by inputs immediately on user input,\n  // but `onOptionsChange` event is debounced and uses last value from internal state.\n\n  const [bounds, setBounds] = useState(options.bounds);\n  const [onOptionsChangeDebounced] = useDebouncedCallback(onOptionsChange, 200);\n\n  const [geoJson] = useLoadGeoJson(options.mapType);\n\n  // `options.bounds` could be empty only if user didn't edit bounds yet - through preview or in this editor.\n  // In this case we should keep empty bounds value because it tells renderer to fit map every time.\n  useEffect(() => {\n    if (options.bounds) {\n      setBounds(options.bounds);\n    } else {\n      const defaultBounds = getGeoJsonBounds(geoJson);\n      if (defaultBounds) {\n        setBounds(defaultBounds);\n      }\n    }\n  }, [options.bounds, geoJson]);\n\n  const updateBounds = useCallback(\n    (i, j, v) => {\n      v = parseFloat(v); // InputNumber may emit `null` and empty strings instead of numbers\n      if (isFinite(v)) {\n        const newBounds = cloneDeep(bounds);\n        newBounds[i][j] = v;\n        setBounds(newBounds);\n        onOptionsChangeDebounced({ bounds: newBounds });\n      }\n    },\n    [bounds, onOptionsChangeDebounced]\n  );\n\n  const boundsAvailable = isArray(bounds);\n\n  return (\n    <React.Fragment>\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        {/* @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'null | un... Remove this comment to see the full error message */}\n        <ControlLabel label=\"North-East Latitude and Longitude\">\n          {/* @ts-expect-error ts-migrate(2322) FIXME: Type 'Element' is not assignable to type 'null | u... Remove this comment to see the full error message */}\n          <Grid.Row gutter={15}>\n            <Grid.Col span={12}>\n              <InputNumber\n                disabled={!boundsAvailable}\n                value={boundsAvailable ? bounds[1][0] : undefined}\n                onChange={(value: any) => updateBounds(1, 0, value)}\n              />\n            </Grid.Col>\n            <Grid.Col span={12}>\n              <InputNumber\n                disabled={!boundsAvailable}\n                value={boundsAvailable ? bounds[1][1] : undefined}\n                onChange={(value: any) => updateBounds(1, 1, value)}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </ControlLabel>\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        {/* @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'null | un... Remove this comment to see the full error message */}\n        <ControlLabel label=\"South-West Latitude and Longitude\">\n          {/* @ts-expect-error ts-migrate(2322) FIXME: Type 'Element' is not assignable to type 'null | u... Remove this comment to see the full error message */}\n          <Grid.Row gutter={15}>\n            <Grid.Col span={12}>\n              <InputNumber\n                disabled={!boundsAvailable}\n                value={boundsAvailable ? bounds[0][0] : undefined}\n                onChange={(value: any) => updateBounds(0, 0, value)}\n              />\n            </Grid.Col>\n            <Grid.Col span={12}>\n              <InputNumber\n                disabled={!boundsAvailable}\n                value={boundsAvailable ? bounds[0][1] : undefined}\n                onChange={(value: any) => updateBounds(0, 1, value)}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </ControlLabel>\n      </Section>\n    </React.Fragment>\n  );\n}\n\nBoundsSettings.propTypes = EditorPropTypes;\n"],"file":"BoundsSettings.js"}