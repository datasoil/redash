{"version":3,"sources":["../../../src/visualizations/word-cloud/Renderer.tsx"],"names":["computeWordFrequencies","rows","column","result","row","wordsList","split","d","getWordsWithFrequencies","wordColumn","frequencyColumn","count","parseFloat","Number","isFinite","word","applyLimitsToWords","words","wordLength","wordCount","min","max","text","wordLengthFits","length","wordCountFits","prepareWords","options","frequenciesColumn","counts","item","wordSize","d3","scale","linear","domain","range","color","category20","index","size","angle","wordLengthLimit","wordCountLimit","scaleElement","node","container","style","transform","getBoundingClientRect","nodeWidth","width","nodeHeight","height","containerWidth","containerHeight","scaleX","scaleY","Math","createLayout","fontFamily","window","getComputedStyle","document","body","padding","font","rotate","fontSize","random","render","select","selectAll","remove","svg","append","g","data","enter","attr","x","y","svgBounds","gBounds","ceil","left","top","Renderer","setContainer","setWords","layout","on","w","start","stop","unwatch","querySelector","propTypes","RendererPropTypes"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,sBAAT,CAAgCC,IAAhC,EAA2CC,MAA3C,EAAwD;AACtD,MAAMC,MAAM,GAAG,EAAf;AAEA,oBAAKF,IAAL,EAAWG,GAAG,IAAI;AAChB,QAAMC,SAAS,GAAG,sBAASD,GAAG,CAACF,MAAD,CAAZ,EAAsBI,KAAtB,CAA4B,KAA5B,CAAlB;AACA,sBAAKD,SAAL,EAAgBE,CAAC,IAAI;AACnB;AACAJ,MAAAA,MAAM,CAACI,CAAD,CAAN,GAAY,CAACJ,MAAM,CAACI,CAAD,CAAN,IAAa,CAAd,IAAmB,CAA/B;AACD,KAHD;AAID,GAND;AAQA,SAAOJ,MAAP;AACD;;AAED,SAASK,uBAAT,CAAiCP,IAAjC,EAA4CQ,UAA5C,EAA6DC,eAA7D,EAAmF;AACjF,MAAMP,MAAM,GAAG,EAAf;AAEA,oBAAKF,IAAL,EAAWG,GAAG,IAAI;AAChB,QAAMO,KAAK,GAAGC,UAAU,CAACR,GAAG,CAACM,eAAD,CAAJ,CAAxB;;AACA,QAAIG,MAAM,CAACC,QAAP,CAAgBH,KAAhB,KAA0BA,KAAK,GAAG,CAAtC,EAAyC;AACvC,UAAMI,IAAI,GAAG,sBAASX,GAAG,CAACK,UAAD,CAAZ,CAAb,CADuC,CAEvC;;AACAN,MAAAA,MAAM,CAACY,IAAD,CAAN,GAAeJ,KAAf;AACD;AACF,GAPD;AASA,SAAOR,MAAP;AACD;;AAED,SAASa,kBAAT,CAA4BC,KAA5B,QAAwE;AAAA,MAA9BC,UAA8B,QAA9BA,UAA8B;AAAA,MAAlBC,SAAkB,QAAlBA,SAAkB;AACtED,EAAAA,UAAU,CAACE,GAAX,GAAiBP,MAAM,CAACC,QAAP,CAAgBI,UAAU,CAACE,GAA3B,IAAkCF,UAAU,CAACE,GAA7C,GAAmD,IAApE;AACAF,EAAAA,UAAU,CAACG,GAAX,GAAiBR,MAAM,CAACC,QAAP,CAAgBI,UAAU,CAACG,GAA3B,IAAkCH,UAAU,CAACG,GAA7C,GAAmD,IAApE;AAEAF,EAAAA,SAAS,CAACC,GAAV,GAAgBP,MAAM,CAACC,QAAP,CAAgBK,SAAS,CAACC,GAA1B,IAAiCD,SAAS,CAACC,GAA3C,GAAiD,IAAjE;AACAD,EAAAA,SAAS,CAACE,GAAV,GAAgBR,MAAM,CAACC,QAAP,CAAgBK,SAAS,CAACE,GAA1B,IAAiCF,SAAS,CAACE,GAA3C,GAAiD,IAAjE;AAEA,SAAO,oBAAOJ,KAAP,EAAc,WAAqB;AAAA,QAAlBK,IAAkB,SAAlBA,IAAkB;AAAA,QAAZX,KAAY,SAAZA,KAAY;AACxC,QAAMY,cAAc,GAClB,CAAC,CAACL,UAAU,CAACE,GAAZ,IAAmBE,IAAI,CAACE,MAAL,IAAeN,UAAU,CAACE,GAA9C,MAAuD,CAACF,UAAU,CAACG,GAAZ,IAAmBC,IAAI,CAACE,MAAL,IAAeN,UAAU,CAACG,GAApG,CADF;AAEA,QAAMI,aAAa,GAAG,CAAC,CAACN,SAAS,CAACC,GAAX,IAAkBT,KAAK,IAAIQ,SAAS,CAACC,GAAtC,MAA+C,CAACD,SAAS,CAACE,GAAX,IAAkBV,KAAK,IAAIQ,SAAS,CAACE,GAApF,CAAtB;AACA,WAAOE,cAAc,IAAIE,aAAzB;AACD,GALM,CAAP;AAMD;;AAED,SAASC,YAAT,CAAsBzB,IAAtB,EAAiC0B,OAAjC,EAA+C;AAC7C,MAAIxB,MAAW,GAAG,EAAlB;;AAEA,MAAIwB,OAAO,CAACzB,MAAZ,EAAoB;AAClB,QAAIyB,OAAO,CAACC,iBAAZ,EAA+B;AAC7BzB,MAAAA,MAAM,GAAGK,uBAAuB,CAACP,IAAD,EAAO0B,OAAO,CAACzB,MAAf,EAAuByB,OAAO,CAACC,iBAA/B,CAAhC;AACD,KAFD,MAEO;AACLzB,MAAAA,MAAM,GAAGH,sBAAsB,CAACC,IAAD,EAAO0B,OAAO,CAACzB,MAAf,CAA/B;AACD;;AACDC,IAAAA,MAAM,GAAG,oBACP,iBAAIA,MAAJ,EAAY,CAACQ,KAAD,EAAQW,IAAR,MAAkB;AAAEA,MAAAA,IAAF;AAAQX,MAAAA;AAAR,KAAlB,CAAZ,CADO,EAEP,CAAC;AAAA,UAAGA,KAAH,SAAGA,KAAH;AAAA,aAAe,CAACA,KAAhB;AAAA,KAAD,EAAwB;AAAA,UAAGW,IAAH,SAAGA,IAAH;AAAA,aAAc,CAACA,IAAI,CAACE,MAApB;AAAA,KAAxB,CAFO,CAE6C;AAF7C,KAAT;AAID,GAb4C,CAe7C;;;AACA,MAAMK,MAAM,GAAG,iBAAI1B,MAAJ,EAAY2B,IAAI,IAAIA,IAAI,CAACnB,KAAzB,CAAf,CAhB6C,CAiB7C;;AACA,MAAMoB,QAAQ,GAAGC,YAAGC,KAAH,CACdC,MADc,GAEdC,MAFc,CAEP,CAAC,iBAAIN,MAAJ,CAAD,EAAc,iBAAIA,MAAJ,CAAd,CAFO,EAGdO,KAHc,CAGR,CAAC,EAAD,EAAK,GAAL,CAHQ,CAAjB,CAlB6C,CAqBxB;AACrB;;;AACA,MAAMC,KAAK,GAAGL,YAAGC,KAAH,CAASK,UAAT,EAAd;;AAEA,oBAAKnC,MAAL,EAAa,CAAC2B,IAAD,EAAOS,KAAP,KAAiB;AAC5BT,IAAAA,IAAI,CAACU,IAAL,GAAYT,QAAQ,CAACD,IAAI,CAACnB,KAAN,CAApB;AACAmB,IAAAA,IAAI,CAACO,KAAL,GAAaA,KAAK,CAACE,KAAD,CAAlB,CAF4B,CAG5B;;AACAT,IAAAA,IAAI,CAACW,KAAL,GAAcF,KAAK,GAAG,CAAT,GAAc,EAA3B,CAJ4B,CAIG;AAChC,GALD;AAOA,SAAOvB,kBAAkB,CAACb,MAAD,EAAS;AAChCe,IAAAA,UAAU,EAAES,OAAO,CAACe,eADY;AAEhCvB,IAAAA,SAAS,EAAEQ,OAAO,CAACgB;AAFa,GAAT,CAAzB;AAID;;AAED,SAASC,YAAT,CAAsBC,IAAtB,EAAiCC,SAAjC,EAAiD;AAC/CD,EAAAA,IAAI,CAACE,KAAL,CAAWC,SAAX,GAAuB,IAAvB;;AAD+C,8BAEEH,IAAI,CAACI,qBAAL,EAFF;AAAA,MAEhCC,SAFgC,yBAEvCC,KAFuC;AAAA,MAEbC,UAFa,yBAErBC,MAFqB;;AAAA,8BAGYP,SAAS,CAACG,qBAAV,EAHZ;AAAA,MAGhCK,cAHgC,yBAGvCH,KAHuC;AAAA,MAGRI,eAHQ,yBAGhBF,MAHgB;;AAK/C,MAAMG,MAAM,GAAGF,cAAc,GAAGJ,SAAhC;AACA,MAAMO,MAAM,GAAGF,eAAe,GAAGH,UAAjC;AAEAP,EAAAA,IAAI,CAACE,KAAL,CAAWC,SAAX,mBAAgCU,IAAI,CAACtC,GAAL,CAASoC,MAAT,EAAiBC,MAAjB,CAAhC;AACD;;AAED,SAASE,YAAT,GAAwB;AACtB,MAAMC,UAAU,GAAGC,MAAM,CAACC,gBAAP,CAAwBC,QAAQ,CAACC,IAAjC,EAAuCJ,UAA1D;AAEA,SACE;AACA,4BACE;AACA;AAFF,KAGGpB,IAHH,CAGQ,CAAC,IAAD,EAAO,IAAP,CAHR,EAIGyB,OAJH,CAIW,CAJX,EAKGC,IALH,CAKQN,UALR,EAME;AANF,KAOGO,MAPH,CAOU5D,CAAC,IAAIA,CAAC,CAACkC,KAPjB,EAQG2B,QARH,CAQY7D,CAAC,IAAIA,CAAC,CAACiC,IARnB,EASG6B,MATH,CASU,MAAM,GAThB;AAFF,IAHsB,CAenB;AACJ;;AAED,SAASC,MAAT,CAAgBxB,SAAhB,EAAgC7B,KAAhC,EAA4C;AAC1C6B,EAAAA,SAAS,GAAGd,YAAGuC,MAAH,CAAUzB,SAAV,CAAZ;AACAA,EAAAA,SAAS,CAAC0B,SAAV,CAAoB,GAApB,EAAyBC,MAAzB;AAEA,MAAMC,GAAG,GAAG5B,SAAS,CAAC6B,MAAV,CAAiB,KAAjB,CAAZ;AACA,MAAMC,CAAC,GAAGF,GAAG,CAACC,MAAJ,CAAW,GAAX,CAAV;AACAC,EAAAA,CAAC,CAACJ,SAAF,CAAY,MAAZ,EACGK,IADH,CACQ5D,KADR,EAEG6D,KAFH,GAGGH,MAHH,CAGU,MAHV,EAIG5B,KAJH,CAIS,WAJT,EAIuBxC,CAAD,cAAeA,CAAC,CAACiC,IAAjB,OAJtB,EAKGO,KALH,CAKS,aALT,EAKyBxC,CAAD,IAAYA,CAAC,CAAC2D,IALtC,EAMGnB,KANH,CAMS,MANT,EAMkBxC,CAAD,IAAYA,CAAC,CAAC8B,KAN/B,EAOG0C,IAPH,CAOQ,aAPR,EAOuB,QAPvB,EAQGA,IARH,CAQQ,WARR,EAQsBxE,CAAD,wBAAyB,CAACA,CAAC,CAACyE,CAAH,EAAMzE,CAAC,CAAC0E,CAAR,CAAzB,sBAA+C1E,CAAC,CAAC4D,MAAjD,MARrB,EASG7C,IATH,CASSf,CAAD,IAAYA,CAAC,CAACe,IATtB;AAWA,MAAM4D,SAAS,GAAGR,GAAG,CAAC7B,IAAJ,GAAWI,qBAAX,EAAlB;AACA,MAAMkC,OAAO,GAAGP,CAAC,CAAC/B,IAAF,GAASI,qBAAT,EAAhB;AAEAyB,EAAAA,GAAG,CAACK,IAAJ,CAAS,OAAT,EAAkBrB,IAAI,CAAC0B,IAAL,CAAUD,OAAO,CAAChC,KAAlB,CAAlB,EAA4C4B,IAA5C,CAAiD,QAAjD,EAA2DrB,IAAI,CAAC0B,IAAL,CAAUD,OAAO,CAAC9B,MAAlB,CAA3D;AACAuB,EAAAA,CAAC,CAACG,IAAF,CAAO,WAAP,sBAAiCG,SAAS,CAACG,IAAV,GAAiBF,OAAO,CAACE,IAA1D,cAAkEH,SAAS,CAACI,GAAV,GAAgBH,OAAO,CAACG,GAA1F;AAEA1C,EAAAA,YAAY,CAAC8B,GAAG,CAAC7B,IAAJ,EAAD,EAAaC,SAAS,CAACD,IAAV,EAAb,CAAZ;AACD;;AAEc,SAAS0C,QAAT,QAA0C;AAAA,MAAtBV,IAAsB,SAAtBA,IAAsB;AAAA,MAAhBlD,OAAgB,SAAhBA,OAAgB;;AAAA,kBACrB,qBAAS,IAAT,CADqB;AAAA;AAAA,MAChDmB,SADgD;AAAA,MACrC0C,YADqC;;AAAA,mBAE7B,qBAAS,EAAT,CAF6B;AAAA;AAAA,MAEhDvE,KAFgD;AAAA,MAEzCwE,QAFyC;;AAGvD,MAAMC,MAAM,GAAG,oBAAQ/B,YAAR,EAAsB,EAAtB,CAAf,CAHuD,CAKvD;;AACA,wBAAU,MAAM;AACd+B,IAAAA,MAAM,CACHzE,KADH,CACSS,YAAY,CAACmD,IAAI,CAAC5E,IAAN,EAAY0B,OAAZ,CADrB,EAEE;AAFF,KAGGgE,EAHH,CAGM,KAHN,EAGaC,CAAC,IAAIH,QAAQ,CAACG,CAAD,CAH1B,EAIGC,KAJH,GADc,CAMd;;AACA,WAAO,MAAMH,MAAM,CAACC,EAAP,CAAU,KAAV,EAAiB,IAAjB,EAAuBG,IAAvB,EAAb;AACD,GARD,EAQG,CAACJ,MAAD,EAASb,IAAT,EAAelD,OAAf,EAAwB8D,QAAxB,CARH;AAUA,wBAAU,MAAM;AACd,QAAI3C,SAAJ,EAAe;AACbwB,MAAAA,MAAM,CAACxB,SAAD,EAAY7B,KAAZ,CAAN;AACD;AACF,GAJD,EAIG,CAAC6B,SAAD,EAAY7B,KAAZ,CAJH;AAMA,wBAAU,MAAM;AACd,QAAI6B,SAAJ,EAAe;AACb,UAAMiD,OAAO,GAAG,6BAAejD,SAAf,EAA0B,MAAM;AAC9C;AACA,YAAM4B,GAAG,GAAG5B,SAAS,CAACkD,aAAV,CAAwB,KAAxB,CAAZ;;AACA,YAAItB,GAAJ,EAAS;AACP9B,UAAAA,YAAY,CAAC8B,GAAD,EAAM5B,SAAN,CAAZ;AACD;AACF,OANe,CAAhB;AAOA,aAAOiD,OAAP;AACD;AACF,GAXD,EAWG,CAACjD,SAAD,CAXH,EAtBuD,CAmCvD;;AACA,sBAAO;AAAK,IAAA,SAAS,EAAC,oCAAf;AAAoD,IAAA,GAAG,EAAE0C;AAAzD,IAAP;AACD;;AAEDD,QAAQ,CAACU,SAAT,GAAqBC,4BAArB","sourcesContent":["import d3 from \"d3\";\nimport cloud from \"d3-cloud\";\nimport { each, filter, map, min, max, sortBy, toString } from \"lodash\";\nimport React, { useMemo, useState, useEffect } from \"react\";\nimport resizeObserver from \"@/services/resizeObserver\";\nimport { RendererPropTypes } from \"@/visualizations/prop-types\";\n\nimport \"./renderer.less\";\n\nfunction computeWordFrequencies(rows: any, column: any) {\n  const result = {};\n\n  each(rows, row => {\n    const wordsList = toString(row[column]).split(/\\s/g);\n    each(wordsList, d => {\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      result[d] = (result[d] || 0) + 1;\n    });\n  });\n\n  return result;\n}\n\nfunction getWordsWithFrequencies(rows: any, wordColumn: any, frequencyColumn: any) {\n  const result = {};\n\n  each(rows, row => {\n    const count = parseFloat(row[frequencyColumn]);\n    if (Number.isFinite(count) && count > 0) {\n      const word = toString(row[wordColumn]);\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      result[word] = count;\n    }\n  });\n\n  return result;\n}\n\nfunction applyLimitsToWords(words: any, { wordLength, wordCount }: any) {\n  wordLength.min = Number.isFinite(wordLength.min) ? wordLength.min : null;\n  wordLength.max = Number.isFinite(wordLength.max) ? wordLength.max : null;\n\n  wordCount.min = Number.isFinite(wordCount.min) ? wordCount.min : null;\n  wordCount.max = Number.isFinite(wordCount.max) ? wordCount.max : null;\n\n  return filter(words, ({ text, count }) => {\n    const wordLengthFits =\n      (!wordLength.min || text.length >= wordLength.min) && (!wordLength.max || text.length <= wordLength.max);\n    const wordCountFits = (!wordCount.min || count >= wordCount.min) && (!wordCount.max || count <= wordCount.max);\n    return wordLengthFits && wordCountFits;\n  });\n}\n\nfunction prepareWords(rows: any, options: any) {\n  let result: any = [];\n\n  if (options.column) {\n    if (options.frequenciesColumn) {\n      result = getWordsWithFrequencies(rows, options.column, options.frequenciesColumn);\n    } else {\n      result = computeWordFrequencies(rows, options.column);\n    }\n    result = sortBy(\n      map(result, (count, text) => ({ text, count })),\n      [({ count }) => -count, ({ text }) => -text.length] // \"count\" desc, length(\"text\") desc\n    );\n  }\n\n  // Add additional attributes\n  const counts = map(result, item => item.count);\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'scale' does not exist on type 'typeof im... Remove this comment to see the full error message\n  const wordSize = d3.scale\n    .linear()\n    .domain([min(counts), max(counts)])\n    .range([10, 100]); // min/max word size\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'scale' does not exist on type 'typeof im... Remove this comment to see the full error message\n  const color = d3.scale.category20();\n\n  each(result, (item, index) => {\n    item.size = wordSize(item.count);\n    item.color = color(index);\n    // @ts-expect-error ts-migrate(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message\n    item.angle = (index % 2) * 90; // make it stable between renderings\n  });\n\n  return applyLimitsToWords(result, {\n    wordLength: options.wordLengthLimit,\n    wordCount: options.wordCountLimit,\n  });\n}\n\nfunction scaleElement(node: any, container: any) {\n  node.style.transform = null;\n  const { width: nodeWidth, height: nodeHeight } = node.getBoundingClientRect();\n  const { width: containerWidth, height: containerHeight } = container.getBoundingClientRect();\n\n  const scaleX = containerWidth / nodeWidth;\n  const scaleY = containerHeight / nodeHeight;\n\n  node.style.transform = `scale(${Math.min(scaleX, scaleY)})`;\n}\n\nfunction createLayout() {\n  const fontFamily = window.getComputedStyle(document.body).fontFamily;\n\n  return (\n    // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.\n    cloud()\n      // make the area large enough to contain even very long words; word cloud will be placed in the center of the area\n      // TODO: dimensions probably should be larger, but `d3-cloud` has some performance issues related to these values\n      .size([5000, 5000])\n      .padding(3)\n      .font(fontFamily)\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'angle' does not exist on type 'Word'.\n      .rotate(d => d.angle)\n      .fontSize(d => d.size)\n      .random(() => 0.5)\n  ); // do not place words randomly - use compact layout\n}\n\nfunction render(container: any, words: any) {\n  container = d3.select(container);\n  container.selectAll(\"*\").remove();\n\n  const svg = container.append(\"svg\");\n  const g = svg.append(\"g\");\n  g.selectAll(\"text\")\n    .data(words)\n    .enter()\n    .append(\"text\")\n    .style(\"font-size\", (d: any) => `${d.size}px`)\n    .style(\"font-family\", (d: any) => d.font)\n    .style(\"fill\", (d: any) => d.color)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"transform\", (d: any) => `translate(${[d.x, d.y]}) rotate(${d.rotate})`)\n    .text((d: any) => d.text);\n\n  const svgBounds = svg.node().getBoundingClientRect();\n  const gBounds = g.node().getBoundingClientRect();\n\n  svg.attr(\"width\", Math.ceil(gBounds.width)).attr(\"height\", Math.ceil(gBounds.height));\n  g.attr(\"transform\", `translate(${svgBounds.left - gBounds.left},${svgBounds.top - gBounds.top})`);\n\n  scaleElement(svg.node(), container.node());\n}\n\nexport default function Renderer({ data, options }: any) {\n  const [container, setContainer] = useState(null);\n  const [words, setWords] = useState([]);\n  const layout = useMemo(createLayout, []);\n\n  // @ts-expect-error ts-migrate(2345) FIXME: Argument of type '() => () => layout.Cloud<cloud.W... Remove this comment to see the full error message\n  useEffect(() => {\n    layout\n      .words(prepareWords(data.rows, options))\n      // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'Word[]' is not assignable to par... Remove this comment to see the full error message\n      .on(\"end\", w => setWords(w))\n      .start();\n    // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.\n    return () => layout.on(\"end\", null).stop();\n  }, [layout, data, options, setWords]);\n\n  useEffect(() => {\n    if (container) {\n      render(container, words);\n    }\n  }, [container, words]);\n\n  useEffect(() => {\n    if (container) {\n      const unwatch = resizeObserver(container, () => {\n        // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\n        const svg = container.querySelector(\"svg\");\n        if (svg) {\n          scaleElement(svg, container);\n        }\n      });\n      return unwatch;\n    }\n  }, [container]);\n\n  // @ts-expect-error ts-migrate(2322) FIXME: Type 'Dispatch<SetStateAction<null>>' is not assig... Remove this comment to see the full error message\n  return <div className=\"word-cloud-visualization-container\" ref={setContainer} />;\n}\n\nRenderer.propTypes = RendererPropTypes;\n"],"file":"Renderer.js"}