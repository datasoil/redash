{"version":3,"sources":["../../../../src/visualizations/table/columns/link.tsx"],"names":["Editor","column","onChange","onChangeDebounced","linkUrlTemplate","event","target","value","linkTextTemplate","linkTitleTemplate","linkOpenInNewTab","checked","cursor","ContextHelp","defaultIcon","initLinkColumn","prepareData","row","name","href","title","text","result","LinkColumn","props","friendlyName"],"mappings":"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","sourcesContent":["import { extend, trim } from \"lodash\";\nimport React from \"react\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport { Section, Input, Checkbox, ContextHelp } from \"@/components/visualizations/editor\";\nimport { formatSimpleTemplate } from \"@/lib/value-format\";\n\ntype Props = {\n  column: {\n    name: string;\n    linkUrlTemplate?: string;\n    linkTextTemplate?: string;\n    linkTitleTemplate?: string;\n    linkOpenInNewTab?: boolean;\n  };\n  onChange: (...args: any[]) => any;\n};\n\nfunction Editor({ column, onChange }: Props) {\n  const [onChangeDebounced] = useDebouncedCallback(onChange, 200);\n\n  return (\n    <React.Fragment>\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Input\n          label=\"URL template\"\n          data-test=\"Table.ColumnEditor.Link.UrlTemplate\"\n          defaultValue={column.linkUrlTemplate}\n          onChange={(event: any) => onChangeDebounced({ linkUrlTemplate: event.target.value })}\n        />\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Input\n          label=\"Text template\"\n          data-test=\"Table.ColumnEditor.Link.TextTemplate\"\n          defaultValue={column.linkTextTemplate}\n          onChange={(event: any) => onChangeDebounced({ linkTextTemplate: event.target.value })}\n        />\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Input\n          label=\"Title template\"\n          data-test=\"Table.ColumnEditor.Link.TitleTemplate\"\n          defaultValue={column.linkTitleTemplate}\n          onChange={(event: any) => onChangeDebounced({ linkTitleTemplate: event.target.value })}\n        />\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Checkbox\n          data-test=\"Table.ColumnEditor.Link.OpenInNewTab\"\n          checked={column.linkOpenInNewTab}\n          onChange={event => onChange({ linkOpenInNewTab: event.target.checked })}>\n          Open in new tab\n        </Checkbox>\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        {/* @ts-expect-error ts-migrate(2746) FIXME: This JSX tag's 'children' prop expects a single ch... Remove this comment to see the full error message */}\n        <ContextHelp\n          placement=\"topLeft\"\n          arrowPointAtCenter\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'Element' is not assignable to type 'null | u... Remove this comment to see the full error message\n          icon={<span style={{ cursor: \"default\" }}>Format specs {ContextHelp.defaultIcon}</span>}>\n          <div>\n            All columns can be referenced using <code>{\"{{ column_name }}\"}</code> syntax.\n          </div>\n          <div>\n            Use <code>{\"{{ @ }}\"}</code> to reference current (this) column.\n          </div>\n          <div>This syntax is applicable to URL, Text and Title options.</div>\n        </ContextHelp>\n      </Section>\n    </React.Fragment>\n  );\n}\n\nexport default function initLinkColumn(column: any) {\n  function prepareData(row: any) {\n    row = extend({ \"@\": row[column.name] }, row);\n\n    const href = trim(formatSimpleTemplate(column.linkUrlTemplate, row));\n    if (href === \"\") {\n      return {};\n    }\n\n    const title = trim(formatSimpleTemplate(column.linkTitleTemplate, row));\n    const text = trim(formatSimpleTemplate(column.linkTextTemplate, row));\n\n    const result = {\n      href,\n      text: text !== \"\" ? text : href,\n    };\n\n    if (title !== \"\") {\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'title' does not exist on type '{ href: s... Remove this comment to see the full error message\n      result.title = title;\n    }\n    if (column.linkOpenInNewTab) {\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'target' does not exist on type '{ href: ... Remove this comment to see the full error message\n      result.target = \"_blank\";\n    }\n\n    return result;\n  }\n\n  function LinkColumn({ row }: any) {\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'text' does not exist on type '{}'.\n    // eslint-disable-line react/prop-types\n    const { text, ...props } = prepareData(row);\n    return <a {...props}>{text}</a>;\n  }\n\n  LinkColumn.prepareData = prepareData;\n\n  return LinkColumn;\n}\n\ninitLinkColumn.friendlyName = \"Link\";\ninitLinkColumn.Editor = Editor;\n"],"file":"link.js"}