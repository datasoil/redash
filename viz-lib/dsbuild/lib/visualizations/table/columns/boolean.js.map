{"version":3,"sources":["../../../../src/visualizations/table/columns/boolean.tsx"],"names":["Editor","column","onChange","handleChange","index","value","booleanValues","splice","handleChangeDebounced","event","target","initBooleanColumn","format","prepareData","row","text","name","BooleanColumn","friendlyName"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAUA,SAASA,MAAT,OAA6C;AAAA,MAA3BC,MAA2B,QAA3BA,MAA2B;AAAA,MAAnBC,QAAmB,QAAnBA,QAAmB;;AAC3C,WAASC,YAAT,CAAsBC,KAAtB,EAAkCC,KAAlC,EAA8C;AAC5C;AACA,QAAMC,aAAa,GAAG,CAAC,GAAGL,MAAM,CAACK,aAAX,CAAtB;AACAA,IAAAA,aAAa,CAACC,MAAd,CAAqBH,KAArB,EAA4B,CAA5B,EAA+BC,KAA/B;AACAH,IAAAA,QAAQ,CAAC;AAAEI,MAAAA;AAAF,KAAD,CAAR;AACD;;AAN0C,8BAQX,uCAAqBH,YAArB,EAAmC,GAAnC,CARW;AAAA;AAAA,MAQpCK,qBARoC;;AAU3C,sBACE,6BAAC,cAAD,CAAO,QAAP,qBAEE,6BAAC,eAAD,qBACE,6BAAC,aAAD;AACE,IAAA,KAAK,eACH,6BAAC,cAAD,CAAO,QAAP,mCACY,mDADZ,CAFJ;AAME,iBAAU,kCANZ,CAOE;AAPF;AAQE,IAAA,YAAY,EAAEP,MAAM,CAACK,aAAP,CAAqB,CAArB,CARhB;AASE,IAAA,QAAQ,EAAGG,KAAD,IAAgBD,qBAAqB,CAAC,CAAD,EAAIC,KAAK,CAACC,MAAN,CAAaL,KAAjB;AATjD,IADF,CAFF,eAiBE,6BAAC,eAAD,qBACE,6BAAC,aAAD;AACE,IAAA,KAAK,eACH,6BAAC,cAAD,CAAO,QAAP,mCACY,kDADZ,CAFJ;AAME,iBAAU,iCANZ,CAOE;AAPF;AAQE,IAAA,YAAY,EAAEJ,MAAM,CAACK,aAAP,CAAqB,CAArB,CARhB;AASE,IAAA,QAAQ,EAAGG,KAAD,IAAgBD,qBAAqB,CAAC,CAAD,EAAIC,KAAK,CAACC,MAAN,CAAaL,KAAjB;AATjD,IADF,CAjBF,CADF;AAiCD;;AAEc,SAASM,iBAAT,CAA2BV,MAA3B,EAAwC;AACrD,MAAMW,MAAM,GAAG,yCAAuBX,MAAM,CAACK,aAA9B,CAAf;;AAEA,WAASO,WAAT,CAAqBC,GAArB,EAA+B;AAC7B,WAAO;AACLC,MAAAA,IAAI,EAAEH,MAAM,CAACE,GAAG,CAACb,MAAM,CAACe,IAAR,CAAJ;AADP,KAAP;AAGD;;AAED,WAASC,aAAT,QAAqC;AAAA,QAAZH,GAAY,SAAZA,GAAY;;AACnC;AADmC,uBAElBD,WAAW,CAACC,GAAD,CAFO;AAAA,QAE3BC,IAF2B,gBAE3BA,IAF2B;;AAGnC,WAAOA,IAAP;AACD;;AAEDE,EAAAA,aAAa,CAACJ,WAAd,GAA4BA,WAA5B;AAEA,SAAOI,aAAP;AACD;;AAEDN,iBAAiB,CAACO,YAAlB,GAAiC,SAAjC;AACAP,iBAAiB,CAACX,MAAlB,GAA2BA,MAA3B","sourcesContent":["import React from \"react\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport { Section, Input } from \"@/components/visualizations/editor\";\nimport { createBooleanFormatter } from \"@/lib/value-format\";\n\ntype Props = {\n  column: {\n    name: string;\n    booleanValues?: string[];\n  };\n  onChange: (...args: any[]) => any;\n};\n\nfunction Editor({ column, onChange }: Props) {\n  function handleChange(index: any, value: any) {\n    // @ts-expect-error ts-migrate(2488) FIXME: Type 'string[] | undefined' must have a '[Symbol.i... Remove this comment to see the full error message\n    const booleanValues = [...column.booleanValues];\n    booleanValues.splice(index, 1, value);\n    onChange({ booleanValues });\n  }\n\n  const [handleChangeDebounced] = useDebouncedCallback(handleChange, 200);\n\n  return (\n    <React.Fragment>\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Input\n          label={\n            <React.Fragment>\n              Value for <code>false</code>\n            </React.Fragment>\n          }\n          data-test=\"Table.ColumnEditor.Boolean.False\"\n          // @ts-expect-error ts-migrate(2532) FIXME: Object is possibly 'undefined'.\n          defaultValue={column.booleanValues[0]}\n          onChange={(event: any) => handleChangeDebounced(0, event.target.value)}\n        />\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Input\n          label={\n            <React.Fragment>\n              Value for <code>true</code>\n            </React.Fragment>\n          }\n          data-test=\"Table.ColumnEditor.Boolean.True\"\n          // @ts-expect-error ts-migrate(2532) FIXME: Object is possibly 'undefined'.\n          defaultValue={column.booleanValues[1]}\n          onChange={(event: any) => handleChangeDebounced(1, event.target.value)}\n        />\n      </Section>\n    </React.Fragment>\n  );\n}\n\nexport default function initBooleanColumn(column: any) {\n  const format = createBooleanFormatter(column.booleanValues);\n\n  function prepareData(row: any) {\n    return {\n      text: format(row[column.name]),\n    };\n  }\n\n  function BooleanColumn({ row }: any) {\n    // eslint-disable-line react/prop-types\n    const { text } = prepareData(row);\n    return text;\n  }\n\n  BooleanColumn.prepareData = prepareData;\n\n  return BooleanColumn;\n}\n\ninitBooleanColumn.friendlyName = \"Boolean\";\ninitBooleanColumn.Editor = Editor;\n"],"file":"boolean.js"}