{"version":3,"sources":["../../../../src/visualizations/chart/Editor/PieColorsSettings.tsx"],"names":["getUniqueValues","chartData","uniqueValuesNames","Set","series","data","row","add","x","PieColorsSettings","options","onOptionsChange","colors","Automatic","ColorPalette","rows","value","key","color","valuesOptions","updateValuesOption","prop","columns","title","dataIndex","width","render","unused","item","propTypes","EditorPropTypes"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,SAASA,eAAT,CAAyBC,SAAzB,EAAyC;AACvC,MAAMC,iBAAiB,GAAG,IAAIC,GAAJ,EAA1B;AACA,oBAAKF,SAAL,EAAgBG,MAAM,IAAI;AACxB,sBAAKA,MAAM,CAACC,IAAZ,EAAkBC,GAAG,IAAI;AACvBJ,MAAAA,iBAAiB,CAACK,GAAlB,CAAsBD,GAAG,CAACE,CAA1B;AACD,KAFD;AAGD,GAJD;AAKA,SAAO,CAAC,GAAGN,iBAAJ,CAAP;AACD;;AAEc,SAASO,iBAAT,OAAoE;AAAA,MAAvCC,OAAuC,QAAvCA,OAAuC;AAAA,MAA9BL,IAA8B,QAA9BA,IAA8B;AAAA,MAAxBM,eAAwB,QAAxBA,eAAwB;AACjF,MAAMC,MAAM,GAAG,oBACb;AACEC,IAAAA,SAAS,EAAE;AADb,KAEKC,qBAFL,CADa,EAKb,EALa,CAAf;AAQA,MAAMV,MAAM,GAAG,oBACb,MACE,iBAAIJ,eAAe,CAAC,2BAAaK,IAAI,CAACU,IAAlB,EAAwBL,OAAxB,CAAD,CAAnB,EAAuDM,KAAK,KAAK;AAC/DC,IAAAA,GAAG,EAAED,KAD0D;AAE/D;AACAE,IAAAA,KAAK,EAAE,CAACR,OAAO,CAACS,aAAR,CAAsBH,KAAtB,KAAgC,EAAjC,EAAqCE,KAArC,IAA8C;AAHU,GAAL,CAA5D,CAFW,EAOb,CAACR,OAAD,EAAUL,IAAV,CAPa,CAAf;AAUA,MAAMe,kBAAkB,GAAG,wBACzB,CAACH,GAAD,EAAMI,IAAN,EAAYL,KAAZ,KAAsB;AACpBL,IAAAA,eAAe,CAAC;AACdQ,MAAAA,aAAa,EAAE;AACb,SAACF,GAAD,GAAO;AACL,WAACI,IAAD,GAAQL;AADH;AADM;AADD,KAAD,CAAf;AAOD,GATwB,EAUzB,CAACL,eAAD,CAVyB,CAA3B;AAaA,MAAMW,OAAO,GAAG,CACd;AACEC,IAAAA,KAAK,EAAE,QADT;AAEEC,IAAAA,SAAS,EAAE;AAFb,GADc,EAKd;AACED,IAAAA,KAAK,EAAE,OADT;AAEEC,IAAAA,SAAS,EAAE,OAFb;AAGEC,IAAAA,KAAK,EAAE,IAHT;AAIEC,IAAAA,MAAM,EAAE,CAACC,MAAD,EAAcC,IAAd,kBACN,6BAAC,oBAAD,CACE;AADF;AAEE,0CAA2BA,IAAI,CAACX,GAAhC,WAFF,CAGE;AAHF;AAIE,MAAA,WAAW,MAJb,CAKE;AALF;AAME,MAAA,YAAY,EAAEL,MANhB,CAOE;AAPF;AAQE,MAAA,SAAS,EAAC,UARZ,CASE;AATF;AAUE,MAAA,KAAK,EAAEgB,IAAI,CAACV,KAVd,CAWE;AAXF;AAYE,MAAA,QAAQ,EAAGF,KAAD,IAAgBI,kBAAkB,CAACQ,IAAI,CAACX,GAAN,EAAW,OAAX,EAAoBD,KAApB,CAZ9C,CAaE;AAbF;AAcE,MAAA,UAAU,eAAE,6BAAC,oBAAD,CAAa,KAAb;AAAmB,QAAA,KAAK,EAAEY,IAAI,CAACV,KAA/B;AAAsC,QAAA,YAAY,EAAEN;AAApD;AAdd;AALJ,GALc,CAAhB;AA8BA,sBAAO,6BAAC,cAAD;AAAO,IAAA,UAAU,EAAE,KAAnB;AAA0B,IAAA,UAAU,EAAER,MAAtC;AAA8C,IAAA,OAAO,EAAEkB,OAAvD;AAAgE,IAAA,UAAU,EAAE;AAA5E,IAAP;AACD;;AAEDb,iBAAiB,CAACoB,SAAlB,GAA8BC,0BAA9B","sourcesContent":["import { each, map } from \"lodash\";\nimport React, { useMemo, useCallback } from \"react\";\nimport Table from \"antd/lib/table\";\nimport ColorPicker from \"@/components/ColorPicker\";\nimport { EditorPropTypes } from \"@/visualizations/prop-types\";\nimport ColorPalette from \"@/visualizations/ColorPalette\";\nimport getChartData from \"../getChartData\";\n\nfunction getUniqueValues(chartData: any) {\n  const uniqueValuesNames = new Set();\n  each(chartData, series => {\n    each(series.data, row => {\n      uniqueValuesNames.add(row.x);\n    });\n  });\n  return [...uniqueValuesNames];\n}\n\nexport default function PieColorsSettings({ options, data, onOptionsChange }: any) {\n  const colors = useMemo(\n    () => ({\n      Automatic: null,\n      ...ColorPalette,\n    }),\n    []\n  );\n\n  const series = useMemo(\n    () =>\n      map(getUniqueValues(getChartData(data.rows, options)), value => ({\n        key: value,\n        // @ts-expect-error ts-migrate(2538) FIXME: Type 'unknown' cannot be used as an index type.\n        color: (options.valuesOptions[value] || {}).color || null,\n      })),\n    [options, data]\n  );\n\n  const updateValuesOption = useCallback(\n    (key, prop, value) => {\n      onOptionsChange({\n        valuesOptions: {\n          [key]: {\n            [prop]: value,\n          },\n        },\n      });\n    },\n    [onOptionsChange]\n  );\n\n  const columns = [\n    {\n      title: \"Values\",\n      dataIndex: \"key\",\n    },\n    {\n      title: \"Color\",\n      dataIndex: \"color\",\n      width: \"1%\",\n      render: (unused: any, item: any) => (\n        <ColorPicker\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'never'.\n          data-test={`Chart.Series.${item.key}.Color`}\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'boolean' is not assignable to type 'never'.\n          interactive\n          // @ts-expect-error ts-migrate(2322) FIXME: Type '{ \"Indian Red\": string; \"Green 2\": string; \"... Remove this comment to see the full error message\n          presetColors={colors}\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'never'.\n          placement=\"topRight\"\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n          color={item.color}\n          // @ts-expect-error ts-migrate(2322) FIXME: Type '(value: any) => void' is not assignable to t... Remove this comment to see the full error message\n          onChange={(value: any) => updateValuesOption(item.key, \"color\", value)}\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'Element' is not assignable to type 'never'.\n          addonAfter={<ColorPicker.Label color={item.color} presetColors={colors} />}\n        />\n      ),\n    },\n  ];\n\n  return <Table showHeader={false} dataSource={series} columns={columns} pagination={false} />;\n}\n\nPieColorsSettings.propTypes = EditorPropTypes;\n"],"file":"PieColorsSettings.js"}