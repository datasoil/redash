{"version":3,"sources":["../../../../src/visualizations/chart/Editor/AxisSettings.tsx"],"names":["toNumber","value","parseFloat","AxisSettings","id","options","features","onChange","optionsChanged","newOptions","text","title","handleNameChange","opts","handleMinMaxChange","type","autoDetectType","event","target","range","rangeMin","rangeMax","defaultProps"],"mappings":"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","sourcesContent":["import { isString, isObject, isFinite, isNumber, merge } from \"lodash\";\nimport React from \"react\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport * as Grid from \"antd/lib/grid\";\nimport { Section, Select, Input, InputNumber } from \"@/components/visualizations/editor\";\n\nfunction toNumber(value: any) {\n  value = isNumber(value) ? value : parseFloat(value);\n  return isFinite(value) ? value : null;\n}\n\ntype OwnProps = {\n  id: string;\n  options: {\n    type: string;\n    title?: {\n      text?: string;\n    };\n    rangeMin?: number;\n    rangeMax?: number;\n  };\n  features?: {\n    autoDetectType?: boolean;\n    range?: boolean;\n  };\n  onChange?: (...args: any[]) => any;\n};\n\ntype Props = OwnProps & typeof AxisSettings.defaultProps;\n\nexport default function AxisSettings({ id, options, features, onChange }: Props) {\n  function optionsChanged(newOptions: any) {\n    onChange(merge({}, options, newOptions));\n  }\n\n  const [handleNameChange] = useDebouncedCallback(text => {\n    const title = isString(text) && text !== \"\" ? { text } : null;\n    optionsChanged({ title });\n  }, 200);\n\n  const [handleMinMaxChange] = useDebouncedCallback(opts => optionsChanged(opts), 200);\n\n  return (\n    <React.Fragment>\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Select\n          label=\"Scale\"\n          data-test={`Chart.${id}.Type`}\n          defaultValue={options.type}\n          onChange={(type: any) => optionsChanged({ type })}>\n          {features.autoDetectType && (\n            // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\n            <Select.Option value=\"-\" data-test={`Chart.${id}.Type.Auto`}>\n              Auto Detect\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          )}\n          {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n          <Select.Option value=\"datetime\" data-test={`Chart.${id}.Type.DateTime`}>\n            Datetime\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n          </Select.Option>\n          {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n          <Select.Option value=\"linear\" data-test={`Chart.${id}.Type.Linear`}>\n            Linear\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n          </Select.Option>\n          {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n          <Select.Option value=\"logarithmic\" data-test={`Chart.${id}.Type.Logarithmic`}>\n            Logarithmic\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n          </Select.Option>\n          {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n          <Select.Option value=\"category\" data-test={`Chart.${id}.Type.Category`}>\n            Category\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n          </Select.Option>\n        </Select>\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Input\n          label=\"Name\"\n          data-test={`Chart.${id}.Name`}\n          defaultValue={isObject(options.title) ? options.title.text : null}\n          onChange={(event: any) => handleNameChange(event.target.value)}\n        />\n      </Section>\n\n      {features.range && (\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n        <Section>\n          {/* @ts-expect-error ts-migrate(2322) FIXME: Type '{ children: Element[]; gutter: number; type:... Remove this comment to see the full error message */}\n          <Grid.Row gutter={15} type=\"flex\" align=\"middle\">\n            <Grid.Col span={12}>\n              <InputNumber\n                label=\"Min Value\"\n                placeholder=\"Auto\"\n                data-test={`Chart.${id}.RangeMin`}\n                defaultValue={toNumber(options.rangeMin)}\n                onChange={(value: any) => handleMinMaxChange({ rangeMin: toNumber(value) })}\n              />\n            </Grid.Col>\n            <Grid.Col span={12}>\n              <InputNumber\n                label=\"Max Value\"\n                placeholder=\"Auto\"\n                data-test={`Chart.${id}.RangeMax`}\n                defaultValue={toNumber(options.rangeMax)}\n                onChange={(value: any) => handleMinMaxChange({ rangeMax: toNumber(value) })}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Section>\n      )}\n    </React.Fragment>\n  );\n}\n\nAxisSettings.defaultProps = {\n  features: {},\n  onChange: () => {},\n};\n"],"file":"AxisSettings.js"}