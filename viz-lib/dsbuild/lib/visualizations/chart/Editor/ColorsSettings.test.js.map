{"version":3,"sources":["../../../../src/visualizations/chart/Editor/ColorsSettings.test.tsx"],"names":["findByTestID","wrapper","testId","find","mount","options","done","enzyme","columns","name","type","rows","a","b","changedOptions","expect","toMatchSnapshot","describe","test","el","globalSeriesType","columnMapping","last","simulate","target","value","colorScheme"],"mappings":"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","sourcesContent":["import { after } from \"lodash\";\nimport React from \"react\";\nimport enzyme from \"enzyme\";\n\nimport getOptions from \"../getOptions\";\nimport ColorsSettings from \"./ColorsSettings\";\n\nfunction findByTestID(wrapper: any, testId: any) {\n  return wrapper.find(`[data-test=\"${testId}\"]`);\n}\n\nfunction mount(options: any, done: any) {\n  options = getOptions(options);\n  return enzyme.mount(\n    <ColorsSettings\n      visualizationName=\"Test\"\n      data={{\n        columns: [\n          { name: \"a\", type: \"string\" },\n          { name: \"b\", type: \"number\" },\n        ],\n        rows: [{ a: \"v\", b: 3.14 }],\n      }}\n      options={options}\n      onOptionsChange={(changedOptions: any) => {\n        expect(changedOptions).toMatchSnapshot();\n        done();\n      }}\n    />\n  );\n}\n\ndescribe(\"Visualizations -> Chart -> Editor -> Colors Settings\", () => {\n  describe(\"for pie\", () => {\n    test(\"Changes series color\", done => {\n      const el = mount(\n        {\n          globalSeriesType: \"pie\",\n          columnMapping: { a: \"x\", b: \"y\" },\n        },\n        done\n      );\n\n      findByTestID(el, \"Chart.Series.v.Color\")\n        .find(\".color-picker-trigger\")\n        .last()\n        .simulate(\"click\");\n      findByTestID(el, \"ColorPicker\")\n        .last()\n        .find(\"input\")\n        .simulate(\"change\", { target: { value: \"red\" } });\n    });\n  });\n\n  describe(\"for heatmap\", () => {\n    test(\"Changes color scheme\", done => {\n      const el = mount(\n        {\n          globalSeriesType: \"heatmap\",\n          columnMapping: { a: \"x\", b: \"y\" },\n        },\n        done\n      );\n\n      findByTestID(el, \"Chart.Colors.Heatmap.ColorScheme\")\n        .last()\n        .simulate(\"mouseDown\");\n      findByTestID(el, \"Chart.Colors.Heatmap.ColorScheme.Blues\")\n        .last()\n        .simulate(\"click\");\n    });\n\n    test(\"Sets custom color scheme\", done => {\n      const el = mount(\n        {\n          globalSeriesType: \"heatmap\",\n          columnMapping: { a: \"x\", b: \"y\" },\n          colorScheme: \"Custom...\",\n        },\n        after(2, done)\n      ); // we will perform 2 actions, so call `done` after all of them completed\n\n      findByTestID(el, \"Chart.Colors.Heatmap.MinColor\")\n        .find(\".color-picker-trigger\")\n        .last()\n        .simulate(\"click\");\n      findByTestID(el, \"ColorPicker\")\n        .last()\n        .find(\"input\")\n        .simulate(\"change\", { target: { value: \"yellow\" } });\n\n      findByTestID(el, \"Chart.Colors.Heatmap.MaxColor\")\n        .find(\".color-picker-trigger\")\n        .last()\n        .simulate(\"click\");\n      findByTestID(el, \"ColorPicker\")\n        .last()\n        .find(\"input\")\n        .simulate(\"change\", { target: { value: \"red\" } });\n    });\n  });\n\n  describe(\"for all except of pie and heatmap\", () => {\n    test(\"Changes series color\", done => {\n      const el = mount(\n        {\n          globalSeriesType: \"column\",\n          columnMapping: { a: \"x\", b: \"y\" },\n        },\n        done\n      );\n\n      findByTestID(el, \"Chart.Series.b.Color\")\n        .find(\".color-picker-trigger\")\n        .last()\n        .simulate(\"click\");\n\n      findByTestID(el, \"ColorPicker\")\n        .last()\n        .find(\"input\")\n        .simulate(\"change\", { target: { value: \"red\" } });\n    });\n  });\n});\n"],"file":"ColorsSettings.test.js"}