{"version":3,"sources":["../../../../src/visualizations/chart/Renderer/initChart.ts"],"names":["createErrorHandler","errorHandler","error","initPlotUpdater","actions","updater","append","action","push","process","plotlyElement","length","updates","handlers","Plotly","relayout","then","handler","Promise","resolve","initChart","container","options","data","additionalOptions","onError","handleError","plotlyOptions","showLink","displaylogo","hidePlotlyModeBar","displayModeBar","plotlyData","plotlyLayout","isDestroyed","createSafeFunction","fn","unwatchResize","promise","newPlot","on","visible","onHover","onUnHover","catch","result","initialized","setZoomEnabled","allowZoom","layoutUpdates","dragmode","destroy","removeAllListeners","__previousSize","purge"],"mappings":"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","sourcesContent":["import { isArray, isObject, isString, isFunction, startsWith, reduce, merge, map, each } from \"lodash\";\nimport resizeObserver from \"@/services/resizeObserver\";\nimport { Plotly, prepareData, prepareLayout, updateData, updateAxes, updateChartSize } from \"../plotly\";\n\nfunction createErrorHandler(errorHandler: any) {\n  return (error: any) => {\n    // This error happens only when chart width is 20px and looks that\n    // it's safe to just ignore it: 1px less or more and chart will get fixed.\n    if (isString(error) && startsWith(error, \"ax.dtick error\")) {\n      return;\n    }\n    errorHandler(error);\n  };\n}\n\n// This utility is intended to reduce amount of plot updates when multiple Plotly.relayout\n// calls needed in order to compute/update the plot.\n// `.append()` method takes an array of two element: first one is a object with updates for layout,\n// and second is an optional function that will be called when plot is updated. That function may\n// return an array with same structure if further updates needed.\n// `.process()` merges all updates into a single object and calls `Plotly.relayout()`. After that\n// it calls all callbacks, collects their return values and does another loop if needed.\nfunction initPlotUpdater() {\n  let actions: any = [];\n\n  const updater = {\n    append(action: any) {\n      if (isArray(action) && isObject(action[0])) {\n        actions.push(action);\n      }\n      return updater;\n    },\n    // @ts-expect-error ts-migrate(7023) FIXME: 'process' implicitly has return type 'any' because... Remove this comment to see the full error message\n    process(plotlyElement: any) {\n      if (actions.length > 0) {\n        const updates = reduce(actions, (updates, action) => merge(updates, action[0]), {});\n        const handlers = map(actions, action => (isFunction(action[1]) ? action[1] : () => null));\n        actions = [];\n        return Plotly.relayout(plotlyElement, updates).then(() => {\n          each(handlers, handler => updater.append(handler()));\n          return updater.process(plotlyElement);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    },\n  };\n\n  return updater;\n}\n\nexport default function initChart(container: any, options: any, data: any, additionalOptions: any, onError: any) {\n  const handleError = createErrorHandler(onError);\n\n  const plotlyOptions = {\n    showLink: false,\n    displaylogo: false,\n  };\n\n  if (additionalOptions.hidePlotlyModeBar) {\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'displayModeBar' does not exist on type '... Remove this comment to see the full error message\n    plotlyOptions.displayModeBar = false;\n  }\n\n  const plotlyData = prepareData(data, options);\n  const plotlyLayout = prepareLayout(container, options, plotlyData);\n\n  let isDestroyed = false;\n\n  let updater = initPlotUpdater();\n\n  function createSafeFunction(fn: any) {\n    // @ts-expect-error ts-migrate(7019) FIXME: Rest parameter 'args' implicitly has an 'any[]' ty... Remove this comment to see the full error message\n    return (...args) => {\n      if (!isDestroyed) {\n        try {\n          return fn(...args);\n        } catch (error) {\n          handleError(error);\n        }\n      }\n    };\n  }\n\n  let unwatchResize = () => {};\n\n  const promise = Promise.resolve()\n    .then(() => Plotly.newPlot(container, plotlyData, plotlyLayout, plotlyOptions))\n    .then(\n      createSafeFunction(() =>\n        updater\n          .append(updateAxes(container, plotlyData, plotlyLayout, options))\n          .append(updateChartSize(container, plotlyLayout, options))\n          .process(container)\n      )\n    )\n    .then(\n      createSafeFunction(() => {\n        container.on(\n          \"plotly_restyle\",\n          createSafeFunction((updates: any) => {\n            // This event is triggered if some plotly data/layout has changed.\n            // We need to catch only changes of traces visibility to update stacking\n            // @ts-expect-error ts-migrate(2339) FIXME: Property 'visible' does not exist on type 'object'... Remove this comment to see the full error message\n            if (isArray(updates) && isObject(updates[0]) && updates[0].visible) {\n              updateData(plotlyData, options);\n              updater.append(updateAxes(container, plotlyData, plotlyLayout, options)).process(container);\n            }\n          })\n        );\n        options.onHover && container.on(\"plotly_hover\", options.onHover);\n        options.onUnHover && container.on(\"plotly_unhover\", options.onUnHover);\n\n        unwatchResize = resizeObserver(\n          container,\n          createSafeFunction(() => {\n            updater.append(updateChartSize(container, plotlyLayout, options)).process(container);\n          })\n        );\n      })\n    )\n    .catch(handleError);\n\n  // @ts-expect-error ts-migrate(7022) FIXME: 'result' implicitly has type 'any' because it does... Remove this comment to see the full error message\n  const result = {\n    initialized: promise.then(() => result),\n    setZoomEnabled: createSafeFunction((allowZoom: any) => {\n      const layoutUpdates = { dragmode: allowZoom ? \"zoom\" : false };\n      // @ts-expect-error ts-migrate(2345) FIXME: Argument of type '{ dragmode: string | boolean; }'... Remove this comment to see the full error message\n      return Plotly.relayout(container, layoutUpdates);\n    }),\n    destroy: createSafeFunction(() => {\n      isDestroyed = true;\n      container.removeAllListeners(\"plotly_restyle\");\n      unwatchResize();\n      delete container.__previousSize; // added by `updateChartSize`\n      Plotly.purge(container);\n    }),\n  };\n\n  return result;\n}\n"],"file":"initChart.js"}