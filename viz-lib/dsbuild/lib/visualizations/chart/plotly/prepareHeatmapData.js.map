{"version":3,"sources":["../../../../src/visualizations/chart/plotly/prepareHeatmapData.ts"],"names":["defaultColorScheme","prepareSeries","series","options","additionalOptions","colorScheme","formatNumber","plotlySeries","x","y","z","type","name","colorscale","data","v","sortX","sortY","reverseX","reverse","reverseY","zMax","d","zVal","dataLabels","mode","hoverinfo","showlegend","text","textfont","color","i","length","item","j","datum","zValue","push","isFinite","showDataLabels","prepareHeatmapData","seriesList","heatMinColor","heatMaxColor","numberFormat"],"mappings":"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","sourcesContent":["import { map, max, uniq, sortBy, flatten, find } from \"lodash\";\nimport { createNumberFormatter } from \"@/lib/value-format\";\n\nconst defaultColorScheme = [\n  [0, \"#356aff\"],\n  [0.14, \"#4a7aff\"],\n  [0.28, \"#5d87ff\"],\n  [0.42, \"#7398ff\"],\n  [0.56, \"#fb8c8c\"],\n  [0.71, \"#ec6463\"],\n  [0.86, \"#ec4949\"],\n  [1, \"#e92827\"],\n];\n\nfunction prepareSeries(series: any, options: any, additionalOptions: any) {\n  const { colorScheme, formatNumber } = additionalOptions;\n\n  const plotlySeries = {\n    x: [],\n    y: [],\n    z: [],\n    type: \"heatmap\",\n    name: \"\",\n    colorscale: colorScheme,\n  };\n\n  // @ts-expect-error ts-migrate(2322) FIXME: Type 'any[]' is not assignable to type 'never[]'.\n  plotlySeries.x = uniq(map(series.data, v => v.x));\n  // @ts-expect-error ts-migrate(2322) FIXME: Type 'any[]' is not assignable to type 'never[]'.\n  plotlySeries.y = uniq(map(series.data, v => v.y));\n\n  if (options.sortX) {\n    plotlySeries.x = sortBy(plotlySeries.x);\n  }\n\n  if (options.sortY) {\n    plotlySeries.y = sortBy(plotlySeries.y);\n  }\n\n  if (options.reverseX) {\n    plotlySeries.x.reverse();\n  }\n\n  if (options.reverseY) {\n    plotlySeries.y.reverse();\n  }\n\n  const zMax = max(map(series.data, d => d.zVal));\n\n  // Use text trace instead of default annotation for better performance\n  const dataLabels = {\n    x: [],\n    y: [],\n    mode: \"text\",\n    hoverinfo: \"skip\",\n    showlegend: false,\n    text: [],\n    textfont: {\n      color: [],\n    },\n  };\n\n  for (let i = 0; i < plotlySeries.y.length; i += 1) {\n    const item = [];\n    for (let j = 0; j < plotlySeries.x.length; j += 1) {\n      const datum = find(series.data, { x: plotlySeries.x[j], y: plotlySeries.y[i] });\n\n      const zValue = (datum && datum.zVal) || 0;\n      item.push(zValue);\n\n      if (isFinite(zMax) && options.showDataLabels) {\n        dataLabels.x.push(plotlySeries.x[j]);\n        dataLabels.y.push(plotlySeries.y[i]);\n        // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'any' is not assignable to parame... Remove this comment to see the full error message\n        dataLabels.text.push(formatNumber(zValue));\n        if (options.colorScheme && options.colorScheme === \"Custom...\") {\n          // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'string' is not assignable to par... Remove this comment to see the full error message\n          dataLabels.textfont.color.push(\"white\");\n        } else {\n          // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'string' is not assignable to par... Remove this comment to see the full error message\n          dataLabels.textfont.color.push(zValue / zMax < 0.25 ? \"white\" : \"black\");\n        }\n      }\n    }\n    // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'any[]' is not assignable to para... Remove this comment to see the full error message\n    plotlySeries.z.push(item);\n  }\n\n  if (isFinite(zMax) && options.showDataLabels) {\n    return [plotlySeries, dataLabels];\n  }\n  return [plotlySeries];\n}\n\nexport default function prepareHeatmapData(seriesList: any, options: any) {\n  let colorScheme = [];\n\n  if (!options.colorScheme) {\n    colorScheme = defaultColorScheme;\n  } else if (options.colorScheme === \"Custom...\") {\n    colorScheme = [\n      [0, options.heatMinColor],\n      [1, options.heatMaxColor],\n    ];\n  } else {\n    colorScheme = options.colorScheme;\n  }\n\n  const additionalOptions = {\n    colorScheme,\n    formatNumber: createNumberFormatter(options.numberFormat),\n  };\n\n  return flatten(map(seriesList, series => prepareSeries(series, options, additionalOptions)));\n}\n"],"file":"prepareHeatmapData.js"}