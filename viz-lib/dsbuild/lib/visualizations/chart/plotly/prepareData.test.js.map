{"version":3,"sources":["../../../../src/visualizations/chart/plotly/prepareData.test.ts"],"names":["cleanSeries","series","map","sourceData","rest","describe","test","require","input","output","data","options","expect","toEqual"],"mappings":"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","sourcesContent":["/* eslint-disable global-require, import/no-unresolved */\nimport prepareData from \"./prepareData\";\n\nfunction cleanSeries(series: any) {\n  return series.map(({ sourceData, ...rest }: any) => rest);\n}\n\ndescribe(\"Visualizations\", () => {\n  describe(\"Chart\", () => {\n    describe(\"prepareData\", () => {\n      describe(\"heatmap\", () => {\n        test(\"default\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/heatmap/default\");\n          const series = prepareData(input.data, input.options);\n          expect(series).toEqual(output.series);\n        });\n        test(\"sorted\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/heatmap/sorted\");\n          const series = prepareData(input.data, input.options);\n          expect(series).toEqual(output.series);\n        });\n        test(\"reversed\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/heatmap/reversed\");\n          const series = prepareData(input.data, input.options);\n          expect(series).toEqual(output.series);\n        });\n        test(\"sorted & reversed\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/heatmap/sorted\");\n          const series = prepareData(input.data, input.options);\n          expect(series).toEqual(output.series);\n        });\n        test(\"with labels\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/heatmap/with-labels\");\n          const series = prepareData(input.data, input.options);\n          expect(series).toEqual(output.series);\n        });\n      });\n\n      describe(\"pie\", () => {\n        test(\"default\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/pie/default\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n\n        test(\"without X mapped\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/pie/without-x\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n\n        test(\"without labels\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/pie/without-labels\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n\n        test(\"custom tooltip\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/pie/custom-tooltip\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n      });\n\n      describe(\"bar (column)\", () => {\n        test(\"default\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/bar/default\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n\n        test(\"stacked\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/bar/stacked\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n\n        test(\"normalized values\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/bar/normalized\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n      });\n\n      describe(\"lines & area\", () => {\n        test(\"default\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/line-area/default\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n\n        test(\"stacked\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/line-area/stacked\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n\n        test(\"normalized values\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/line-area/normalized\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n\n        test(\"stacked & normalized values\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/line-area/normalized-stacked\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n\n        test(\"keep missing values\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/line-area/keep-missing-values\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n\n        test(\"convert missing values to 0\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/line-area/missing-values-0\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n      });\n\n      describe(\"scatter\", () => {\n        test(\"default\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/scatter/default\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n\n        test(\"without labels\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/scatter/without-labels\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n      });\n\n      describe(\"bubble\", () => {\n        test(\"default\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/bubble/default\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n      });\n\n      describe(\"box\", () => {\n        test(\"default\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/box/default\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n\n        test(\"with points\", () => {\n          const { input, output } = require(\"./fixtures/prepareData/box/with-points\");\n          const series = cleanSeries(prepareData(input.data, input.options));\n          expect(series).toEqual(output.series);\n        });\n      });\n    });\n  });\n});\n"],"file":"prepareData.test.js"}