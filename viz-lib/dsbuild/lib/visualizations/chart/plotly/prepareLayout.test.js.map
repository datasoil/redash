{"version":3,"sources":["../../../../src/visualizations/chart/plotly/prepareLayout.test.ts"],"names":["fakeElement","offsetWidth","offsetHeight","describe","test","require","input","output","layout","options","series","expect","toEqual"],"mappings":"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","sourcesContent":["/* eslint-disable global-require, import/no-unresolved */\nimport getOptions from \"../getOptions\";\nimport prepareLayout from \"./prepareLayout\";\n\nconst fakeElement = { offsetWidth: 400, offsetHeight: 300 };\n\ndescribe(\"Visualizations\", () => {\n  describe(\"Chart\", () => {\n    describe(\"prepareLayout\", () => {\n      test(\"Pie\", () => {\n        const { input, output } = require(\"./fixtures/prepareLayout/pie\");\n        const layout = prepareLayout(fakeElement, getOptions(input.options), input.series);\n        expect(layout).toEqual(output.layout);\n      });\n\n      test(\"Pie without annotations\", () => {\n        const { input, output } = require(\"./fixtures/prepareLayout/pie-without-annotations\");\n        const layout = prepareLayout(fakeElement, getOptions(input.options), input.series);\n        expect(layout).toEqual(output.layout);\n      });\n\n      test(\"Pie with multiple series\", () => {\n        const { input, output } = require(\"./fixtures/prepareLayout/pie-multiple-series\");\n        const layout = prepareLayout(fakeElement, getOptions(input.options), input.series);\n        expect(layout).toEqual(output.layout);\n      });\n\n      test(\"Box with single Y axis\", () => {\n        const { input, output } = require(\"./fixtures/prepareLayout/box-single-axis\");\n        const layout = prepareLayout(fakeElement, getOptions(input.options), input.series);\n        expect(layout).toEqual(output.layout);\n      });\n\n      test(\"Box with second Y axis\", () => {\n        const { input, output } = require(\"./fixtures/prepareLayout/box-with-second-axis\");\n        const layout = prepareLayout(fakeElement, getOptions(input.options), input.series);\n        expect(layout).toEqual(output.layout);\n      });\n\n      test(\"Default with single Y axis\", () => {\n        const { input, output } = require(\"./fixtures/prepareLayout/default-single-axis\");\n        const layout = prepareLayout(fakeElement, getOptions(input.options), input.series);\n        expect(layout).toEqual(output.layout);\n      });\n\n      test(\"Default with second Y axis\", () => {\n        const { input, output } = require(\"./fixtures/prepareLayout/default-with-second-axis\");\n        const layout = prepareLayout(fakeElement, getOptions(input.options), input.series);\n        expect(layout).toEqual(output.layout);\n      });\n\n      test(\"Default without legend\", () => {\n        const { input, output } = require(\"./fixtures/prepareLayout/default-without-legend\");\n        const layout = prepareLayout(fakeElement, getOptions(input.options), input.series);\n        expect(layout).toEqual(output.layout);\n      });\n\n      test(\"Default with stacking\", () => {\n        const { input, output } = require(\"./fixtures/prepareLayout/default-with-stacking\");\n        const layout = prepareLayout(fakeElement, getOptions(input.options), input.series);\n        expect(layout).toEqual(output.layout);\n      });\n    });\n  });\n});\n"],"file":"prepareLayout.test.js"}