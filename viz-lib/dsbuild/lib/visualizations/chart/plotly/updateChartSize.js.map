{"version":3,"sources":["../../../../src/visualizations/chart/plotly/updateChartSize.ts"],"names":["fixLegendContainer","plotlyElement","legend","querySelector","node","parentNode","tagName","toLowerCase","style","overflow","placeLegendNextToPlot","layout","transformName","prop","orientation","y","x","xanchor","yanchor","placeLegendBelowPlot","layoutHeight","height","bounds","getBoundingClientRect","Math","floor","max","bottom","top","placeLegendAuto","width","updateChartSize","options","offsetWidth","offsetHeight","__previousSize","previousWidth","previousHeight","enabled","placement"],"mappings":"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","sourcesContent":["import { find, pick, extend } from \"lodash\";\n\nfunction fixLegendContainer(plotlyElement: any) {\n  const legend = plotlyElement.querySelector(\".legend\");\n  if (legend) {\n    let node = legend.parentNode;\n    while (node) {\n      if (node.tagName.toLowerCase() === \"svg\") {\n        node.style.overflow = \"visible\";\n        break;\n      }\n      node = node.parentNode;\n    }\n  }\n}\n\nfunction placeLegendNextToPlot(plotlyElement: any, layout: any) {\n  const transformName = find(\n    [\"transform\", \"WebkitTransform\", \"MozTransform\", \"MsTransform\", \"OTransform\"],\n    prop => prop in plotlyElement.style\n  );\n\n  layout.legend = extend({}, layout.legend, {\n    orientation: \"v\",\n    // vertical legend will be rendered properly, so just place it to the right\n    // side of plot\n    y: 1,\n    x: 1,\n    xanchor: \"left\",\n    yanchor: \"top\",\n  });\n\n  const legend = plotlyElement.querySelector(\".legend\");\n  if (legend) {\n    // @ts-expect-error ts-migrate(2538) FIXME: Type 'undefined' cannot be used as an index type.\n    legend.style[transformName] = null;\n  }\n\n  return [pick(layout, [\"width\", \"height\", \"legend\"]), null]; // no further updates\n}\n\nfunction placeLegendBelowPlot(plotlyElement: any, layout: any) {\n  const transformName = find(\n    [\"transform\", \"WebkitTransform\", \"MozTransform\", \"MsTransform\", \"OTransform\"],\n    prop => prop in plotlyElement.style\n  );\n\n  // Save current `layout.height` value because `Plotly.relayout().then(...)` handler may be called multiple\n  // times within single update, and since the handler mutates `layout` object - it may lead to bugs\n  const layoutHeight = layout.height;\n\n  // change legend orientation to horizontal; plotly has a bug with this\n  // legend alignment - it does not preserve enough space under the plot;\n  // so we'll hack this: update plot (it will re-render legend), compute\n  // legend height, reduce plot size by legend height (but not less than\n  // half of plot container's height - legend will have max height equal to\n  // plot height), re-render plot again and offset legend to the space under\n  // the plot.\n  // Related issue: https://github.com/plotly/plotly.js/issues/1199\n  layout.legend = extend({}, layout.legend, {\n    orientation: \"h\",\n    // locate legend inside of plot area - otherwise plotly will preserve\n    // some amount of space under the plot; also this will limit legend height\n    // to plot's height\n    y: 0,\n    x: 0,\n    xanchor: \"left\",\n    yanchor: \"bottom\",\n  });\n\n  // set `overflow: visible` to svg containing legend because later we will\n  // position legend outside of it\n  fixLegendContainer(plotlyElement);\n\n  return [\n    pick(layout, [\"width\", \"height\", \"legend\"]),\n    () => {\n      const legend = plotlyElement.querySelector(\".legend\"); // eslint-disable-line no-shadow\n      if (legend) {\n        // compute real height of legend - items may be split into few columnns,\n        // also scrollbar may be shown\n        const bounds = legend.getBoundingClientRect();\n\n        // here we have two values:\n        // 1. height of plot container excluding height of legend items;\n        //    it may be any value between 0 and plot container's height;\n        // 2. half of plot containers height. Legend cannot be larger than\n        //    plot; if legend is too large, plotly will reduce it's height and\n        //    show a scrollbar; in this case, height of plot === height of legend,\n        //    so we can split container's height half by half between them.\n        layout.height = Math.floor(Math.max(layoutHeight / 2, layoutHeight - (bounds.bottom - bounds.top)));\n        // offset the legend\n        // @ts-expect-error ts-migrate(2538) FIXME: Type 'undefined' cannot be used as an index type.\n        legend.style[transformName] = \"translate(0, \" + layout.height + \"px)\";\n        return [pick(layout, [\"height\"]), null]; // no further updates\n      }\n    },\n  ];\n}\n\nfunction placeLegendAuto(plotlyElement: any, layout: any) {\n  if (layout.width <= 600) {\n    return placeLegendBelowPlot(plotlyElement, layout);\n  } else {\n    return placeLegendNextToPlot(plotlyElement, layout);\n  }\n}\n\nexport default function updateChartSize(plotlyElement: any, layout: any, options: any) {\n  // update layout size to plot container\n  // plot size should be at least 5x5px\n  layout.width = Math.max(5, Math.floor(plotlyElement.offsetWidth));\n  layout.height = Math.max(5, Math.floor(plotlyElement.offsetHeight));\n\n  const [previousWidth, previousHeight] = plotlyElement.__previousSize || [];\n\n  if (layout.width === previousWidth && layout.height === previousHeight) {\n    return;\n  }\n\n  plotlyElement.__previousSize = [layout.width, layout.height];\n\n  if (options.legend.enabled) {\n    switch (options.legend.placement) {\n      case \"auto\":\n        return placeLegendAuto(plotlyElement, layout);\n        break;\n      case \"below\":\n        return placeLegendBelowPlot(plotlyElement, layout);\n        break;\n      // no default\n    }\n  } else {\n    return [pick(layout, [\"width\", \"height\"]), null]; // no further updates\n  }\n}\n"],"file":"updateChartSize.js"}