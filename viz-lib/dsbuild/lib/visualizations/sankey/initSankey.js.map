{"version":3,"sources":["../../../src/visualizations/sankey/initSankey.ts"],"names":["getConnectedNodes","node","console","log","nodes","sourceLinks","forEach","link","push","target","targetLinks","source","graph","data","nodesDict","links","validKey","key","dataKeys","identity","normalizeName","name","getNode","level","String","id","getLink","value","addLink","sourceName","targetName","depth","parseInt","row","color","d3","scale","category20","d","replace","spreadNodes","height","nodesByBreadth","nest","x","entries","map","values","sum","o","dy","padding","length","y0","y","isDataValid","columns","c","rows","v","isFinite","prepareDataRows","parseFloat","initSankey","element","select","selectAll","remove","format","margin","top","right","bottom","left","width","offsetWidth","offsetHeight","svg","append","attr","sankey","nodeWidth","nodePadding","size","path","layout","relayout","enter","filter","l","style","Math","max","sort","a","b","text","n","nodeMouseOver","currentNode","i","nodeMouseOut","on","rgb","darker"],"mappings":"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","sourcesContent":["import {\n  isNil,\n  map,\n  extend,\n  sortBy,\n  includes,\n  filter,\n  reduce,\n  find,\n  keys,\n  values,\n  identity,\n  mapValues,\n  every,\n  isNaN,\n  isNumber,\n  isString,\n} from \"lodash\";\nimport d3 from \"d3\";\nimport d3sankey, { NodeType, LinkType, SourceTargetType, DType } from \"./d3sankey\";\nimport { SankeyDataType } from \".\";\n\nexport type ExtendedSankeyDataType = Partial<SankeyDataType> & { nodes: any[]; links: any[] };\n\nfunction getConnectedNodes(node: NodeType) {\n  console.log(node);\n  // source link = this node is the source, I need the targets\n  const nodes: any = [];\n  node.sourceLinks.forEach((link: LinkType) => {\n    nodes.push(link.target);\n  });\n  node.targetLinks.forEach((link: LinkType) => {\n    nodes.push(link.source);\n  });\n\n  return nodes;\n}\n\nfunction graph(data: ExtendedSankeyDataType[\"rows\"]) {\n  const nodesDict = {};\n  const links = {};\n  const nodes: any[] = [];\n\n  const validKey = (key: any) => key !== \"value\";\n  // @ts-expect-error\n  const dataKeys = sortBy(filter(keys(data[0]), validKey), identity);\n\n  function normalizeName(name: any) {\n    if (!isNil(name)) {\n      return \"\" + name;\n    }\n\n    return \"Exit\";\n  }\n\n  function getNode(name: string, level: any) {\n    name = normalizeName(name);\n    const key = `${name}:${String(level)}`;\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    let node = nodesDict[key];\n    if (!node) {\n      node = { name };\n      node.id = nodes.push(node) - 1;\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      nodesDict[key] = node;\n    }\n    return node;\n  }\n\n  function getLink(source: SourceTargetType, target: SourceTargetType) {\n    // @ts-expect-error ts-migrate(2538) FIXME: Type 'any[]' cannot be used as an index type.\n    let link = links[[source, target]];\n    if (!link) {\n      link = { target, source, value: 0 };\n      // @ts-expect-error ts-migrate(2538) FIXME: Type 'any[]' cannot be used as an index type.\n      links[[source, target]] = link;\n    }\n\n    return link;\n  }\n\n  function addLink(sourceName: any, targetName: any, value: any, depth: any) {\n    if ((sourceName === \"\" || !sourceName) && depth > 1) {\n      return;\n    }\n\n    const source = getNode(sourceName, depth);\n    const target = getNode(targetName, depth + 1);\n    const link = getLink(source.id, target.id);\n    link.value += parseInt(value, 10);\n  }\n\n  // @ts-expect-error\n  data.forEach((row: any) => {\n    addLink(row[dataKeys[0]], row[dataKeys[1]], row.value || 0, 1);\n    addLink(row[dataKeys[1]], row[dataKeys[2]], row.value || 0, 2);\n    addLink(row[dataKeys[2]], row[dataKeys[3]], row.value || 0, 3);\n    addLink(row[dataKeys[3]], row[dataKeys[4]], row.value || 0, 4);\n    addLink(row[dataKeys[4]], null, row.value || 0, 5); // this line ensures that the last stage has a corresponding exit node\n  });\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'scale' does not exist on type 'typeof im... Remove this comment to see the full error message\n  const color = d3.scale.category20();\n\n  return {\n    nodes: map(nodes, d => extend(d, { color: color(d.name.replace(/ .*/, \"\")) })),\n    links: values(links),\n  };\n}\n\nfunction spreadNodes(height: any, data: ExtendedSankeyDataType) {\n  const nodesByBreadth = d3\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'nest' does not exist on type 'typeof imp... Remove this comment to see the full error message\n    .nest()\n    .key((d: DType) => d.x)\n    .entries(data.nodes)\n    // @ts-expect-error\n    .map((d: DType) => d.values);\n\n  nodesByBreadth.forEach((nodes: any) => {\n    nodes = filter(\n      sortBy(nodes, node => -node.value),\n      node => node.name !== \"Exit\"\n    );\n\n    // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n    const sum = d3.sum(nodes, o => o.dy);\n    const padding = (height - sum) / nodes.length;\n\n    reduce(\n      nodes,\n      (y0, node) => {\n        node.y = y0;\n        return y0 + node.dy + padding;\n      },\n      0\n    );\n  });\n}\n\nfunction isDataValid(data: ExtendedSankeyDataType) {\n  // data should contain column named 'value', otherwise no reason to render anything at all\n  if (!data || !find(data.columns, c => c.name === \"value\")) {\n    return false;\n  }\n  // prepareData will have coerced any invalid data rows into NaN, which is verified below\n  return every(data.rows, row =>\n    every(row, v => {\n      if (!v || isString(v)) {\n        return true;\n      }\n      return isFinite(v);\n    })\n  );\n}\n\n// will coerce number strings into valid numbers\nfunction prepareDataRows(rows: ExtendedSankeyDataType[\"rows\"]) {\n  return map(rows, row =>\n    mapValues(row, v => {\n      if (!v || isNumber(v)) {\n        return v;\n      }\n      return isNaN(parseFloat(v)) ? v : parseFloat(v);\n    })\n  );\n}\n\nexport default function initSankey(data: ExtendedSankeyDataType) {\n  data.rows = prepareDataRows(data.rows) as ExtendedSankeyDataType[\"rows\"];\n\n  if (!isDataValid(data)) {\n    return (element: HTMLDivElement) => {\n      d3.select(element)\n        .selectAll(\"*\")\n        .remove();\n    };\n  }\n\n  data = graph(data.rows);\n  // @ts-expect-error\n  const format = (d: DType) => d3.format(\",.0f\")(d); // TODO: editor option ?\n\n  return (element: HTMLDivElement) => {\n    d3.select(element)\n      .selectAll(\"*\")\n      .remove();\n\n    const margin = {\n      top: 10,\n      right: 10,\n      bottom: 10,\n      left: 10,\n    };\n    const width = element.offsetWidth - margin.left - margin.right;\n    const height = element.offsetHeight - margin.top - margin.bottom;\n\n    if (width <= 0 || height <= 0) {\n      return;\n    }\n\n    // append the svg canvas to the page\n    const svg: d3.Selection<SVGGElement, any, any, any> = d3\n      .select(element)\n      .append(\"svg\")\n      .attr(\"class\", \"sankey\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Set the sankey diagram properties\n    const sankey = d3sankey()\n      .nodeWidth(15)\n      .nodePadding(10)\n      .size([width, height]);\n\n    const path = sankey.link();\n\n    sankey\n      .nodes(data.nodes)\n      .links(data.links)\n      .layout(0);\n\n    spreadNodes(height, data);\n    sankey.relayout();\n\n    // add in the links\n    const link = svg\n      .append(\"g\")\n      .selectAll(\".link\")\n      .data(data.links)\n      .enter()\n      .append(\"path\")\n      .filter(l => l.target.name !== \"Exit\")\n      .attr(\"class\", \"link\")\n      .attr(\"d\", path)\n      .style(\"stroke-width\", d => Math.max(1, d.dy))\n      .sort((a, b) => b.dy - a.dy);\n\n    // add the link titles\n    link.append(\"title\").text(d => `${d.source.name} → ${d.target.name}\\n${format(d.value)}`);\n\n    const node = svg\n      .append(\"g\")\n      .selectAll(\".node\")\n      .data(data.nodes)\n      .enter()\n      .append(\"g\")\n      .filter(n => n.name !== \"Exit\")\n      .attr(\"class\", \"node\")\n      .attr(\"transform\", (d: DType) => `translate(${d.x},${d.y})`);\n\n    function nodeMouseOver(currentNode: NodeType) {\n      let nodes = getConnectedNodes(currentNode);\n      nodes = map(nodes, i => i.id);\n      node\n        .filter(d => {\n          if (d === currentNode) {\n            return false;\n          }\n          return !includes(nodes, d.id);\n        })\n        .style(\"opacity\", 0.2);\n      link\n        .filter(l => !(includes(currentNode.sourceLinks, l) || includes(currentNode.targetLinks, l)))\n        .style(\"opacity\", 0.2);\n    }\n\n    function nodeMouseOut() {\n      node.style(\"opacity\", 1);\n      link.style(\"opacity\", 1);\n    }\n\n    // add in the nodes\n    node.on(\"mouseover\", nodeMouseOver).on(\"mouseout\", nodeMouseOut);\n\n    // add the rectangles for the nodes\n    // FIXME: d is DType, but d3 will not accept a nonstandard function\n    node\n      .append(\"rect\")\n      .attr(\"height\", (d: any) => d.dy)\n      .attr(\"width\", sankey.nodeWidth())\n      .style(\"fill\", (d: any) => d.color)\n      // @ts-expect-error\n      .style(\"stroke\", (d: any) => d3.rgb(d.color).darker(2))\n      .append(\"title\")\n      .text((d: any) => `${d.name}\\n${format(d.value)}`);\n\n    // add in the title for the nodes\n    node\n      .append(\"text\")\n      .attr(\"x\", -6)\n      .attr(\"y\", (d: any) => d.dy / 2)\n      .attr(\"dy\", \".35em\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"transform\", null)\n      .text((d: any) => d.name)\n      .filter((d: any) => d.x < width / 2)\n      .attr(\"x\", 6 + sankey.nodeWidth())\n      .attr(\"text-anchor\", \"start\");\n  };\n}\n"],"file":"initSankey.js"}