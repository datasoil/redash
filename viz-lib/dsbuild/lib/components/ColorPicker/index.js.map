{"version":3,"sources":["../../../src/components/ColorPicker/index.tsx"],"names":["ColorPicker","color","placement","presetColors","presetColumns","interactive","children","onChange","triggerProps","addonBefore","addonAfter","visible","setVisible","validatedColor","currentColor","setCurrentColor","handleApply","handleCancel","actions","push","handleInputChange","newColor","toUpperCase","backgroundColor","className","defaultProps","Input","ColorInput","Swatch","Label"],"mappings":"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","sourcesContent":["import { toString } from \"lodash\";\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport cx from \"classnames\";\nimport Popover from \"antd/lib/popover\";\nimport Card from \"antd/lib/card\";\nimport Tooltip from \"antd/lib/tooltip\";\nimport chooseTextColorForBackground from \"@/lib/chooseTextColorForBackground\";\n\nimport CloseOutlinedIcon from \"@ant-design/icons/CloseOutlined\";\nimport CheckOutlinedIcon from \"@ant-design/icons/CheckOutlined\";\n\nimport ColorInput from \"./Input\";\nimport Swatch from \"./Swatch\";\nimport Label from \"./Label\";\nimport { validateColor } from \"./utils\";\n\nimport \"./index.less\";\n\ntype OwnProps = {\n  color?: string;\n  placement?:\n    | \"top\"\n    | \"left\"\n    | \"right\"\n    | \"bottom\"\n    | \"topLeft\"\n    | \"topRight\"\n    | \"bottomLeft\"\n    | \"bottomRight\"\n    | \"leftTop\"\n    | \"leftBottom\"\n    | \"rightTop\"\n    | \"rightBottom\";\n  presetColors?:\n    | string[]\n    | {\n        [key: string]: string;\n      };\n  presetColumns?: number;\n  interactive?: boolean;\n  triggerProps?: any;\n  children?: React.ReactNode;\n  addonBefore?: React.ReactNode;\n  addonAfter?: React.ReactNode;\n  onChange?: (...args: any[]) => any;\n};\n\ntype Props = OwnProps & typeof ColorPicker.defaultProps;\n\nexport default function ColorPicker({\n  color,\n  placement,\n  presetColors,\n  presetColumns,\n  interactive,\n  children,\n  onChange,\n  triggerProps,\n  addonBefore,\n  addonAfter,\n}: Props) {\n  const [visible, setVisible] = useState(false);\n  const validatedColor = useMemo(() => validateColor(color), [color]);\n  const [currentColor, setCurrentColor] = useState(\"\");\n\n  function handleApply() {\n    setVisible(false);\n    if (!interactive) {\n      // @ts-expect-error ts-migrate(2349) FIXME: This expression is not callable.\n      onChange(currentColor);\n    }\n  }\n\n  function handleCancel() {\n    setVisible(false);\n  }\n\n  const actions = [];\n  if (!interactive) {\n    actions.push(\n      <Tooltip key=\"cancel\" title=\"Cancel\">\n        <CloseOutlinedIcon onClick={handleCancel} />\n      </Tooltip>\n    );\n    actions.push(\n      <Tooltip key=\"apply\" title=\"Apply\">\n        <CheckOutlinedIcon onClick={handleApply} />\n      </Tooltip>\n    );\n  }\n\n  function handleInputChange(newColor: any) {\n    setCurrentColor(newColor);\n    if (interactive) {\n      // @ts-expect-error ts-migrate(2349) FIXME: This expression is not callable.\n      onChange(newColor);\n    }\n  }\n\n  useEffect(() => {\n    if (visible) {\n      // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'string | null' is not assignable... Remove this comment to see the full error message\n      setCurrentColor(validatedColor);\n    }\n  }, [validatedColor, visible]);\n\n  return (\n    <span className=\"color-picker-wrapper\">\n      {addonBefore}\n      <Popover\n        arrowPointAtCenter\n        overlayClassName={`color-picker ${interactive ? \"color-picker-interactive\" : \"color-picker-with-actions\"}`}\n        // @ts-expect-error ts-migrate(2322) FIXME: Type '{ \"--color-picker-selected-color\": string; }... Remove this comment to see the full error message\n        overlayStyle={{ \"--color-picker-selected-color\": currentColor }}\n        content={\n          <Card\n            data-test=\"ColorPicker\"\n            className=\"color-picker-panel\"\n            bordered={false}\n            title={toString(currentColor).toUpperCase()}\n            headStyle={{\n              backgroundColor: currentColor,\n              // @ts-expect-error ts-migrate(2322) FIXME: Type 'string | null | undefined' is not assignable... Remove this comment to see the full error message\n              color: chooseTextColorForBackground(currentColor),\n            }}\n            actions={actions}>\n            <ColorInput\n              // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'never'.\n              color={currentColor}\n              presetColors={presetColors}\n              presetColumns={presetColumns}\n              // @ts-expect-error ts-migrate(2322) FIXME: Type '(newColor: any) => void' is not assignable t... Remove this comment to see the full error message\n              onChange={handleInputChange}\n              // @ts-expect-error ts-migrate(2322) FIXME: Type '() => void' is not assignable to type 'never... Remove this comment to see the full error message\n              onPressEnter={handleApply}\n            />\n          </Card>\n        }\n        trigger=\"click\"\n        placement={placement}\n        visible={visible}\n        onVisibleChange={setVisible}>\n        {children || (\n          <Swatch\n            color={validatedColor}\n            size={30}\n            {...triggerProps}\n            // @ts-expect-error ts-migrate(2339) FIXME: Property 'className' does not exist on type 'never... Remove this comment to see the full error message\n            className={cx(\"color-picker-trigger\", triggerProps.className)}\n          />\n        )}\n      </Popover>\n      {addonAfter}\n    </span>\n  );\n}\n\nColorPicker.defaultProps = {\n  color: \"#FFFFFF\",\n  placement: \"top\",\n  presetColors: null,\n  presetColumns: 8,\n  interactive: false,\n  triggerProps: {},\n  children: null,\n  addonBefore: null,\n  addonAfter: null,\n  onChange: () => {},\n};\n\nColorPicker.Input = ColorInput;\nColorPicker.Swatch = Swatch;\nColorPicker.Label = Label;\n"],"file":"index.js"}