{"version":3,"sources":["../../../src/components/json-view-interactive/JsonViewInteractive.tsx"],"names":["JsonBlock","value","children","openingBrace","closingBrace","withKeys","isExpanded","setIsExpanded","objectKeys","count","length","key","index","isFirst","isLast","comma","JsonValue","JsonViewInteractive","defaultProps","undefined"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,SAAT,OAAmF;AAAA,MAA9DC,KAA8D,QAA9DA,KAA8D;AAAA,MAAvDC,QAAuD,QAAvDA,QAAuD;AAAA,MAA7CC,YAA6C,QAA7CA,YAA6C;AAAA,MAA/BC,YAA+B,QAA/BA,YAA+B;AAAA,MAAjBC,QAAiB,QAAjBA,QAAiB;;AAAA,kBAC7C,qBAAS,KAAT,CAD6C;AAAA;AAAA,MAC1EC,UAD0E;AAAA,MAC9DC,aAD8D;;AAGjF,MAAMC,UAAU,GAAG,kBAAKP,KAAL,CAAnB;AACA,MAAMQ,KAAK,GAAGD,UAAU,CAACE,MAAzB;AAEA,sBACE,6BAAC,cAAD,CAAO,QAAP,QACGD,KAAK,GAAG,CAAR,iBACC;AAAM,IAAA,SAAS,EAAC,YAAhB;AAA6B,IAAA,OAAO,EAAE,MAAMF,aAAa,CAAC,CAACD,UAAF;AAAzD,kBACE;AAAG,IAAA,SAAS,EAAE,yBAAG,IAAH,EAAS;AAAE,wBAAkB,CAACA,UAArB;AAAiC,uBAAiBA;AAAlD,KAAT;AAAd,IADF,CAFJ,eAME;AAAM,IAAA,SAAS,EAAC;AAAhB,KAA8CH,YAA9C,CANF,EAOG,CAACG,UAAD,IAAeG,KAAK,GAAG,CAAvB,iBACC;AAAM,IAAA,SAAS,EAAC,8BAAhB;AAA+C,IAAA,OAAO,EAAE,MAAMF,aAAa,CAAC,IAAD;AAA3E,cARJ,EAYGD,UAAU,iBACT;AAAM,IAAA,SAAS,EAAC;AAAhB,KACG,iBAAIE,UAAJ,EAAgB,CAACG,GAAD,EAAMC,KAAN,KAAgB;AAC/B,QAAMC,OAAO,GAAGD,KAAK,KAAK,CAA1B;AACA,QAAME,MAAM,GAAGF,KAAK,KAAKH,KAAK,GAAG,CAAjC;AACA,QAAMM,KAAK,GAAGD,MAAM,GAAG,IAAH,gBAAU;AAAM,MAAA,SAAS,EAAC;AAAhB,WAA9B;AACA,wBACE;AACE,MAAA,GAAG,EAAE,UAAUH,GADjB;AAEE,MAAA,SAAS,EAAE,yBAAG,UAAH,EAAe;AAAE,4BAAoBE,OAAtB;AAA+B,2BAAmBC;AAAlD,OAAf;AAFb,OAGGT,QAAQ,iBACP;AAAM,MAAA,SAAS,EAAC;AAAhB,oBACE,6BAAC,SAAD;AAAW,MAAA,KAAK,EAAEM;AAAlB,oBACE;AAAM,MAAA,SAAS,EAAC;AAAhB,YADF,CADF,CAJJ,eAUE,6BAAC,SAAD;AAAW,MAAA,KAAK,EAAEV,KAAK,CAACU,GAAD;AAAvB,OAA+BI,KAA/B,CAVF,CADF;AAcD,GAlBA,CADH,CAbJ,eAmCE;AAAM,IAAA,SAAS,EAAC;AAAhB,KAA8CX,YAA9C,CAnCF,EAoCGF,QApCH,EAqCG,CAACI,UAAD,iBAAe;AAAM,IAAA,SAAS,EAAC;AAAhB,KAA+B,SAASG,KAAT,GAAiB,GAAjB,IAAwBA,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuB,OAA/C,CAA/B,CArClB,CADF;AAyCD;;AAED,SAASO,SAAT,QAA6C;AAAA,MAAxBf,KAAwB,SAAxBA,KAAwB;AAAA,MAAjBC,QAAiB,SAAjBA,QAAiB;;AAC3C,MAAID,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAA5B,IAAqCA,KAAK,KAAK,IAA/C,IAAuD,sBAASA,KAAT,CAA3D,EAA4E;AAC1E,wBACE;AAAM,MAAA,SAAS,EAAC;AAAhB,OACG,KAAKA,KADR,EAEGC,QAFH,CADF;AAMD;;AACD,MAAI,sBAASD,KAAT,CAAJ,EAAqB;AACnB,wBACE,6BAAC,cAAD,CAAO,QAAP,qBACE;AAAM,MAAA,SAAS,EAAC;AAAhB,YADF,eAEE;AAAM,MAAA,SAAS,EAAC;AAAhB,OAAwCA,KAAxC,CAFF,eAGE;AAAM,MAAA,SAAS,EAAC;AAAhB,YAHF,EAIGC,QAJH,CADF;AAQD;;AACD,MAAI,qBAAQD,KAAR,CAAJ,EAAoB;AAClB,wBACE,6BAAC,SAAD;AAAW,MAAA,KAAK,EAAEA,KAAlB;AAAyB,MAAA,YAAY,EAAC,GAAtC;AAA0C,MAAA,YAAY,EAAC;AAAvD,OACGC,QADH,CADF;AAKD;;AACD,MAAI,sBAASD,KAAT,CAAJ,EAAqB;AACnB,wBACE,6BAAC,SAAD;AAAW,MAAA,KAAK,EAAEA,KAAlB;AAAyB,MAAA,YAAY,EAAC,GAAtC;AAA0C,MAAA,YAAY,EAAC,GAAvD;AAA2D,MAAA,QAAQ;AAAnE,OACGC,QADH,CADF;AAKD;;AACD,SAAO,IAAP;AACD;;AAQc,SAASe,mBAAT,QAAkE;AAAA,MAAnChB,KAAmC,SAAnCA,KAAmC;AAC/E,sBACE;AAAM,IAAA,SAAS,EAAC;AAAhB,kBACE,6BAAC,SAAD;AAAW,IAAA,KAAK,EAAEA;AAAlB,IADF,CADF;AAKD;;AAEDgB,mBAAmB,CAACC,YAApB,GAAmC;AACjC;AACAjB,EAAAA,KAAK,EAAEkB;AAF0B,CAAnC","sourcesContent":["/* eslint-disable react/prop-types */\n\nimport { isFinite, isString, isArray, isObject, keys, map } from \"lodash\";\nimport React, { useState } from \"react\";\nimport cx from \"classnames\";\n\nimport \"./json-view-interactive.less\";\n\nfunction JsonBlock({ value, children, openingBrace, closingBrace, withKeys }: any) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const objectKeys = keys(value);\n  const count = objectKeys.length;\n\n  return (\n    <React.Fragment>\n      {count > 0 && (\n        <span className=\"jvi-toggle\" onClick={() => setIsExpanded(!isExpanded)}>\n          <i className={cx(\"fa\", { \"fa-caret-right\": !isExpanded, \"fa-caret-down\": isExpanded })} />\n        </span>\n      )}\n      <span className=\"jvi-punctuation jvi-braces\">{openingBrace}</span>\n      {!isExpanded && count > 0 && (\n        <span className=\"jvi-punctuation jvi-ellipsis\" onClick={() => setIsExpanded(true)}>\n          &hellip;\n        </span>\n      )}\n      {isExpanded && (\n        <span className=\"jvi-block\">\n          {map(objectKeys, (key, index) => {\n            const isFirst = index === 0;\n            const isLast = index === count - 1;\n            const comma = isLast ? null : <span className=\"jvi-punctuation jvi-comma\">,</span>;\n            return (\n              <span\n                key={\"item-\" + key}\n                className={cx(\"jvi-item\", { \"jvi-nested-first\": isFirst, \"jvi-nested-last\": isLast })}>\n                {withKeys && (\n                  <span className=\"jvi-object-key\">\n                    <JsonValue value={key}>\n                      <span className=\"jvi-punctuation\">: </span>\n                    </JsonValue>\n                  </span>\n                )}\n                <JsonValue value={value[key]}>{comma}</JsonValue>\n              </span>\n            );\n          })}\n        </span>\n      )}\n      <span className=\"jvi-punctuation jvi-braces\">{closingBrace}</span>\n      {children}\n      {!isExpanded && <span className=\"jvi-comment\">{\" // \" + count + \" \" + (count === 1 ? \"item\" : \"items\")}</span>}\n    </React.Fragment>\n  );\n}\n\nfunction JsonValue({ value, children }: any) {\n  if (value === null || value === false || value === true || isFinite(value)) {\n    return (\n      <span className=\"jvi-value jvi-primitive\">\n        {\"\" + value}\n        {children}\n      </span>\n    );\n  }\n  if (isString(value)) {\n    return (\n      <React.Fragment>\n        <span className=\"jvi-punctuation jvi-string\">&quot;</span>\n        <span className=\"jvi-value jvi-string\">{value}</span>\n        <span className=\"jvi-punctuation jvi-string\">&quot;</span>\n        {children}\n      </React.Fragment>\n    );\n  }\n  if (isArray(value)) {\n    return (\n      <JsonBlock value={value} openingBrace=\"[\" closingBrace=\"]\">\n        {children}\n      </JsonBlock>\n    );\n  }\n  if (isObject(value)) {\n    return (\n      <JsonBlock value={value} openingBrace=\"{\" closingBrace=\"}\" withKeys>\n        {children}\n      </JsonBlock>\n    );\n  }\n  return null;\n}\n\ntype OwnJsonViewInteractiveProps = {\n  value?: any;\n};\n\ntype JsonViewInteractiveProps = OwnJsonViewInteractiveProps & typeof JsonViewInteractive.defaultProps;\n\nexport default function JsonViewInteractive({ value }: JsonViewInteractiveProps) {\n  return (\n    <span className=\"jvi-item jvi-root\">\n      <JsonValue value={value} />\n    </span>\n  );\n}\n\nJsonViewInteractive.defaultProps = {\n  // `null` will be rendered as \"null\" because it is a valid JSON value, so use `undefined` for no value\n  value: undefined,\n};\n"],"file":"JsonViewInteractive.js"}